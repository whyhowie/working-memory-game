/*! Built with IMPACT - impactjs.com */

(function (window) {
    "use strict";
    Number.prototype.map = function (istart, istop, ostart, ostop) {
        return ostart + (ostop - ostart) * ((this - istart) / (istop - istart));
    };
    Number.prototype.limit = function (min, max) {
        return Math.min(max, Math.max(min, this));
    };
    Number.prototype.round = function (precision) {
        precision = Math.pow(10, precision || 0);
        return Math.round(this * precision) / precision;
    };
    Number.prototype.floor = function () {
        return Math.floor(this);
    };
    Number.prototype.ceil = function () {
        return Math.ceil(this);
    };
    Number.prototype.toInt = function () {
        return this | 0;
    };
    Number.prototype.toRad = function () {
        return (this / 180) * Math.PI;
    };
    Number.prototype.toDeg = function () {
        return (this * 180) / Math.PI;
    };
    Array.prototype.erase = function (item) {
        for (var i = this.length; i--; ) {
            if (this[i] === item) {
                this.splice(i, 1);
            }
        }
        return this;
    };
    Array.prototype.random = function () {
        return this[Math.floor(Math.random() * this.length)];
    };
    Function.prototype.bind =
        Function.prototype.bind ||
        function (oThis) {
            if (typeof this !== "function") {
                throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
            }
            var aArgs = Array.prototype.slice.call(arguments, 1),
                fToBind = this,
                fNOP = function () {},
                fBound = function () {
                    return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
                };
            fNOP.prototype = this.prototype;
            fBound.prototype = new fNOP();
            return fBound;
        };
    window.ig = {
        game: null,
        debug: null,
        version: "1.22",
        global: window,
        modules: {},
        resources: [],
        ready: false,
        baked: false,
        nocache: "",
        ua: {},
        prefix: window.ImpactPrefix || "",
        lib: "lib/",
        _current: null,
        _loadQueue: [],
        _waitForOnload: 0,
        $: function (selector) {
            return selector.charAt(0) == "#" ? document.getElementById(selector.substr(1)) : document.getElementsByTagName(selector);
        },
        $new: function (name) {
            return document.createElement(name);
        },
        copy: function (object) {
            if (!object || typeof object != "object" || object instanceof HTMLElement || object instanceof ig.Class) {
                return object;
            } else if (object instanceof Array) {
                var c = [];
                for (var i = 0, l = object.length; i < l; i++) {
                    c[i] = ig.copy(object[i]);
                }
                return c;
            } else {
                var c = {};
                for (var i in object) {
                    c[i] = ig.copy(object[i]);
                }
                return c;
            }
        },
        merge: function (original, extended) {
            for (var key in extended) {
                var ext = extended[key];
                if (typeof ext != "object" || ext instanceof HTMLElement || ext instanceof ig.Class) {
                    original[key] = ext;
                } else {
                    if (!original[key] || typeof original[key] != "object") {
                        original[key] = ext instanceof Array ? [] : {};
                    }
                    ig.merge(original[key], ext);
                }
            }
            return original;
        },
        ksort: function (obj) {
            if (!obj || typeof obj != "object") {
                return [];
            }
            var keys = [],
                values = [];
            for (var i in obj) {
                keys.push(i);
            }
            keys.sort();
            for (var i = 0; i < keys.length; i++) {
                values.push(obj[keys[i]]);
            }
            return values;
        },
        setVendorAttribute: function (el, attr, val) {
            var uc = attr.charAt(0).toUpperCase() + attr.substr(1);
            el[attr] = el["ms" + uc] = el["moz" + uc] = el["webkit" + uc] = el["o" + uc] = val;
        },
        getVendorAttribute: function (el, attr) {
            var uc = attr.charAt(0).toUpperCase() + attr.substr(1);
            return el[attr] || el["ms" + uc] || el["moz" + uc] || el["webkit" + uc] || el["o" + uc];
        },
        normalizeVendorAttribute: function (el, attr) {
            var prefixedVal = ig.getVendorAttribute(el, attr);
            if (!el[attr] && prefixedVal) {
                el[attr] = prefixedVal;
            }
        },
        getImagePixels: function (image, x, y, width, height) {
            var canvas = ig.$new("canvas");
            canvas.width = image.width;
            canvas.height = image.height;
            var ctx = canvas.getContext("2d");
            ig.System.SCALE.CRISP(canvas, ctx);
            var ratio = ig.getVendorAttribute(ctx, "backingStorePixelRatio") || 1;
            ig.normalizeVendorAttribute(ctx, "getImageDataHD");
            var realWidth = image.width / ratio,
                realHeight = image.height / ratio;
            canvas.width = Math.ceil(realWidth);
            canvas.height = Math.ceil(realHeight);
            ctx.drawImage(image, 0, 0, realWidth, realHeight);
            return ratio === 1 ? ctx.getImageData(x, y, width, height) : ctx.getImageDataHD(x, y, width, height);
        },
        module: function (name) {
            if (ig._current) {
                throw "Module '" + ig._current.name + "' defines nothing";
            }
            if (ig.modules[name] && ig.modules[name].body) {
                throw "Module '" + name + "' is already defined";
            }
            ig._current = { name: name, requires: [], loaded: false, body: null };
            ig.modules[name] = ig._current;
            ig._loadQueue.push(ig._current);
            return ig;
        },
        requires: function () {
            ig._current.requires = Array.prototype.slice.call(arguments);
            return ig;
        },
        defines: function (body) {
            ig._current.body = body;
            ig._current = null;
            ig._initDOMReady();
        },
        addResource: function (resource) {
            ig.resources.push(resource);
        },
        setNocache: function (set) {
            ig.nocache = set ? "?" + Date.now() : "";
        },
        log: function () {},
        assert: function (condition, msg) {},
        show: function (name, number) {},
        mark: function (msg, color) {},
        _loadScript: function (name, requiredFrom) {
            ig.modules[name] = { name: name, requires: [], loaded: false, body: null };
            ig._waitForOnload++;
            var path = ig.prefix + ig.lib + name.replace(/\./g, "/") + ".js" + ig.nocache;
            var script = ig.$new("script");
            script.type = "text/javascript";
            script.src = path;
            script.onload = function () {
                ig._waitForOnload--;
                ig._execModules();
            };
            script.onerror = function () {
                throw "Failed to load module " + name + " at " + path + " " + "required from " + requiredFrom;
            };
            ig.$("head")[0].appendChild(script);
        },
        _execModules: function () {
            var modulesLoaded = false;
            for (var i = 0; i < ig._loadQueue.length; i++) {
                var m = ig._loadQueue[i];
                var dependenciesLoaded = true;
                for (var j = 0; j < m.requires.length; j++) {
                    var name = m.requires[j];
                    if (!ig.modules[name]) {
                        dependenciesLoaded = false;
                        ig._loadScript(name, m.name);
                    } else if (!ig.modules[name].loaded) {
                        dependenciesLoaded = false;
                    }
                }
                if (dependenciesLoaded && m.body) {
                    ig._loadQueue.splice(i, 1);
                    m.loaded = true;
                    m.body();
                    modulesLoaded = true;
                    i--;
                }
            }
            if (modulesLoaded) {
                ig._execModules();
            } else if (!ig.baked && ig._waitForOnload == 0 && ig._loadQueue.length != 0) {
                var unresolved = [];
                for (var i = 0; i < ig._loadQueue.length; i++) {
                    var unloaded = [];
                    var requires = ig._loadQueue[i].requires;
                    for (var j = 0; j < requires.length; j++) {
                        var m = ig.modules[requires[j]];
                        if (!m || !m.loaded) {
                            unloaded.push(requires[j]);
                        }
                    }
                    unresolved.push(ig._loadQueue[i].name + " (requires: " + unloaded.join(", ") + ")");
                }
                throw "Unresolved (circular?) dependencies. " + "Most likely there's a name/path mismatch for one of the listed modules:\n" + unresolved.join("\n");
            }
        },
        _DOMReady: function () {
            if (!ig.modules["dom.ready"].loaded) {
                if (!document.body) {
                    return setTimeout(ig._DOMReady, 13);
                }
                ig.modules["dom.ready"].loaded = true;
                ig._waitForOnload--;
                ig._execModules();
            }
            return 0;
        },
        _boot: function () {
            if (document.location.href.match(/\?nocache/)) {
                ig.setNocache(true);
            }
            ig.ua.pixelRatio = window.devicePixelRatio || 1;
            ig.ua.viewport = { width: window.innerWidth, height: window.innerHeight };
            ig.ua.screen = { width: window.screen.availWidth * ig.ua.pixelRatio, height: window.screen.availHeight * ig.ua.pixelRatio };
            ig.ua.iPhone = /iPhone/i.test(navigator.userAgent);
            ig.ua.iPhone4 = ig.ua.iPhone && ig.ua.pixelRatio == 2;
            ig.ua.iPad = /iPad/i.test(navigator.userAgent);
            ig.ua.android = /android/i.test(navigator.userAgent);
            ig.ua.winPhone = /Windows Phone/i.test(navigator.userAgent);
            ig.ua.iOS = ig.ua.iPhone || ig.ua.iPad;
            ig.ua.mobile = ig.ua.iOS || ig.ua.android || ig.ua.winPhone;
            ig.ua.touchDevice = "ontouchstart" in window || window.navigator.msMaxTouchPoints;
        },
        _initDOMReady: function () {
            if (ig.modules["dom.ready"]) {
                ig._execModules();
                return;
            }
            ig._boot();
            ig.modules["dom.ready"] = { requires: [], loaded: false, body: null };
            ig._waitForOnload++;
            if (document.readyState === "complete") {
                ig._DOMReady();
            } else {
                document.addEventListener("DOMContentLoaded", ig._DOMReady, false);
                window.addEventListener("load", ig._DOMReady, false);
            }
        },
    };
    ig.normalizeVendorAttribute(window, "requestAnimationFrame");
    if (window.requestAnimationFrame) {
        var next = 1,
            anims = {};
        window.ig.setAnimation = function (callback, element) {
            var current = next++;
            anims[current] = true;
            var animate = function () {
                if (!anims[current]) {
                    return;
                }
                window.requestAnimationFrame(animate, element);
                callback();
            };
            window.requestAnimationFrame(animate, element);
            return current;
        };
        window.ig.clearAnimation = function (id) {
            delete anims[id];
        };
    } else {
        window.ig.setAnimation = function (callback, element) {
            return window.setInterval(callback, 1000 / 60);
        };
        window.ig.clearAnimation = function (id) {
            window.clearInterval(id);
        };
    }
    var initializing = false,
        fnTest = /xyz/.test(function () {
            xyz;
        })
            ? /\bparent\b/
            : /.*/;
    window.ig.Class = function () {};
    var inject = function (prop) {
        var proto = this.prototype;
        var parent = {};
        for (var name in prop) {
            if (typeof prop[name] == "function" && typeof proto[name] == "function" && fnTest.test(prop[name])) {
                parent[name] = proto[name];
                proto[name] = (function (name, fn) {
                    return function () {
                        var tmp = this.parent;
                        this.parent = parent[name];
                        var ret = fn.apply(this, arguments);
                        this.parent = tmp;
                        return ret;
                    };
                })(name, prop[name]);
            } else {
                proto[name] = prop[name];
            }
        }
    };
    window.ig.Class.extend = function (prop) {
        var parent = this.prototype;
        initializing = true;
        var prototype = new this();
        initializing = false;
        for (var name in prop) {
            if (typeof prop[name] == "function" && typeof parent[name] == "function" && fnTest.test(prop[name])) {
                prototype[name] = (function (name, fn) {
                    return function () {
                        var tmp = this.parent;
                        this.parent = parent[name];
                        var ret = fn.apply(this, arguments);
                        this.parent = tmp;
                        return ret;
                    };
                })(name, prop[name]);
            } else {
                prototype[name] = prop[name];
            }
        }
        function Class() {
            if (!initializing) {
                if (this.staticInstantiate) {
                    var obj = this.staticInstantiate.apply(this, arguments);
                    if (obj) {
                        return obj;
                    }
                }
                for (var p in this) {
                    if (typeof this[p] == "object") {
                        this[p] = ig.copy(this[p]);
                    }
                }
                if (this.init) {
                    this.init.apply(this, arguments);
                }
            }
            return this;
        }
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.extend = window.ig.Class.extend;
        Class.inject = inject;
        return Class;
    };
    if (window.ImpactMixin) {
        ig.merge(ig, window.ImpactMixin);
    }
})(window);

// lib/impact/image.js
ig.baked = true;
ig.module("impact.image").defines(function () {
    "use strict";
    ig.Image = ig.Class.extend({
        data: null,
        width: 0,
        height: 0,
        loaded: false,
        failed: false,
        loadCallback: null,
        path: "",
        staticInstantiate: function (path) {
            return ig.Image.cache[path] || null;
        },
        init: function (path) {
            this.path = path;
            this.load();
        },
        load: function (loadCallback) {
            if (this.loaded) {
                if (loadCallback) {
                    loadCallback(this.path, true);
                }
                return;
            } else if (!this.loaded && ig.ready) {
                this.loadCallback = loadCallback || null;
                this.data = new Image();
                this.data.onload = this.onload.bind(this);
                this.data.onerror = this.onerror.bind(this);
                this.data.src = ig.prefix + this.path + ig.nocache;
            } else {
                ig.addResource(this);
            }
            ig.Image.cache[this.path] = this;
        },
        reload: function () {
            this.loaded = false;
            this.data = new Image();
            this.data.onload = this.onload.bind(this);
            this.data.src = this.path + "?" + Date.now();
        },
        onload: function (event) {
            this.width = this.data.width;
            this.height = this.data.height;
            this.loaded = true;
            if (ig.system.scale != 1) {
                this.resize(ig.system.scale);
            }
            if (this.loadCallback) {
                this.loadCallback(this.path, true);
            }
        },
        onerror: function (event) {
            this.failed = true;
            if (this.loadCallback) {
                this.loadCallback(this.path, false);
            }
        },
        resize: function (scale) {
            var origPixels = ig.getImagePixels(this.data, 0, 0, this.width, this.height);
            var widthScaled = this.width * scale;
            var heightScaled = this.height * scale;
            var scaled = ig.$new("canvas");
            scaled.width = widthScaled;
            scaled.height = heightScaled;
            var scaledCtx = scaled.getContext("2d");
            var scaledPixels = scaledCtx.getImageData(0, 0, widthScaled, heightScaled);
            for (var y = 0; y < heightScaled; y++) {
                for (var x = 0; x < widthScaled; x++) {
                    var index = (Math.floor(y / scale) * this.width + Math.floor(x / scale)) * 4;
                    var indexScaled = (y * widthScaled + x) * 4;
                    scaledPixels.data[indexScaled] = origPixels.data[index];
                    scaledPixels.data[indexScaled + 1] = origPixels.data[index + 1];
                    scaledPixels.data[indexScaled + 2] = origPixels.data[index + 2];
                    scaledPixels.data[indexScaled + 3] = origPixels.data[index + 3];
                }
            }
            scaledCtx.putImageData(scaledPixels, 0, 0);
            this.data = scaled;
        },
        draw: function (targetX, targetY, sourceX, sourceY, width, height) {
            if (!this.loaded) {
                return;
            }
            var scale = ig.system.scale;
            sourceX = sourceX ? sourceX * scale : 0;
            sourceY = sourceY ? sourceY * scale : 0;
            width = (width ? width : this.width) * scale;
            height = (height ? height : this.height) * scale;
            ig.system.context.drawImage(this.data, sourceX, sourceY, width, height, ig.system.getDrawPos(targetX), ig.system.getDrawPos(targetY), width, height);
            ig.Image.drawCount++;
        },
        drawTile: function (targetX, targetY, tile, tileWidth, tileHeight, flipX, flipY) {
            tileHeight = tileHeight ? tileHeight : tileWidth;
            if (!this.loaded || tileWidth > this.width || tileHeight > this.height) {
                return;
            }
            var scale = ig.system.scale;
            var tileWidthScaled = Math.floor(tileWidth * scale);
            var tileHeightScaled = Math.floor(tileHeight * scale);
            var scaleX = flipX ? -1 : 1;
            var scaleY = flipY ? -1 : 1;
            if (flipX || flipY) {
                ig.system.context.save();
                ig.system.context.scale(scaleX, scaleY);
            }
            ig.system.context.drawImage(
                this.data,
                (Math.floor(tile * tileWidth) % this.width) * scale,
                Math.floor((tile * tileWidth) / this.width) * tileHeight * scale,
                tileWidthScaled,
                tileHeightScaled,
                ig.system.getDrawPos(targetX) * scaleX - (flipX ? tileWidthScaled : 0),
                ig.system.getDrawPos(targetY) * scaleY - (flipY ? tileHeightScaled : 0),
                tileWidthScaled,
                tileHeightScaled
            );
            if (flipX || flipY) {
                ig.system.context.restore();
            }
            ig.Image.drawCount++;
        },
    });
    ig.Image.drawCount = 0;
    ig.Image.cache = {};
    ig.Image.reloadCache = function () {
        for (var path in ig.Image.cache) {
            ig.Image.cache[path].reload();
        }
    };
});

// lib/impact/font.js
ig.baked = true;
ig.module("impact.font")
    .requires("impact.image")
    .defines(function () {
        "use strict";
        ig.Font = ig.Image.extend({
            widthMap: [],
            indices: [],
            firstChar: 32,
            alpha: 1,
            letterSpacing: 1,
            lineSpacing: 0,
            onload: function (ev) {
                this._loadMetrics(this.data);
                this.parent(ev);
            },
            widthForString: function (text) {
                if (text.indexOf("\n") !== -1) {
                    var lines = text.split("\n");
                    var width = 0;
                    for (var i = 0; i < lines.length; i++) {
                        width = Math.max(width, this._widthForLine(lines[i]));
                    }
                    return width;
                } else {
                    return this._widthForLine(text);
                }
            },
            _widthForLine: function (text) {
                var width = 0;
                for (var i = 0; i < text.length; i++) {
                    width += this.widthMap[text.charCodeAt(i) - this.firstChar] + this.letterSpacing;
                }
                return width;
            },
            heightForString: function (text) {
                return text.split("\n").length * (this.height + this.lineSpacing);
            },
            draw: function (text, x, y, align) {
                if (typeof text != "string") {
                    text = text.toString();
                }
                if (text.indexOf("\n") !== -1) {
                    var lines = text.split("\n");
                    var lineHeight = this.height + this.lineSpacing;
                    for (var i = 0; i < lines.length; i++) {
                        this.draw(lines[i], x, y + i * lineHeight, align);
                    }
                    return;
                }
                if (align == ig.Font.ALIGN.RIGHT || align == ig.Font.ALIGN.CENTER) {
                    var width = this._widthForLine(text);
                    x -= align == ig.Font.ALIGN.CENTER ? width / 2 : width;
                }
                if (this.alpha !== 1) {
                    ig.system.context.globalAlpha = this.alpha;
                }
                for (var i = 0; i < text.length; i++) {
                    var c = text.charCodeAt(i);
                    x += this._drawChar(c - this.firstChar, x, y);
                }
                if (this.alpha !== 1) {
                    ig.system.context.globalAlpha = 1;
                }
                ig.Image.drawCount += text.length;
            },
            _drawChar: function (c, targetX, targetY) {
                if (!this.loaded || c < 0 || c >= this.indices.length) {
                    return 0;
                }
                var scale = ig.system.scale;
                var charX = this.indices[c] * scale;
                var charY = 0;
                var charWidth = this.widthMap[c] * scale;
                var charHeight = (this.height - 2) * scale;
                ig.system.context.drawImage(this.data, charX, charY, charWidth, charHeight, ig.system.getDrawPos(targetX), ig.system.getDrawPos(targetY), charWidth, charHeight);
                return this.widthMap[c] + this.letterSpacing;
            },
            _loadMetrics: function (image) {
                this.height = image.height - 1;
                this.widthMap = [];
                this.indices = [];
                var px = ig.getImagePixels(image, 0, image.height - 1, image.width, 1);
                var currentChar = 0;
                var currentWidth = 0;
                for (var x = 0; x < image.width; x++) {
                    var index = x * 4 + 3;
                    if (px.data[index] > 127) {
                        currentWidth++;
                    } else if (px.data[index] < 128 && currentWidth) {
                        this.widthMap.push(currentWidth);
                        this.indices.push(x - currentWidth);
                        currentChar++;
                        currentWidth = 0;
                    }
                }
                this.widthMap.push(currentWidth);
                this.indices.push(x - currentWidth);
            },
        });
        ig.Font.ALIGN = { LEFT: 0, RIGHT: 1, CENTER: 2 };
    });

// lib/impact/sound.js
ig.baked = true;
ig.module("impact.sound").defines(function () {
    "use strict";
    ig.SoundManager = ig.Class.extend({
        clips: {},
        volume: 1,
        format: null,
        init: function () {
            if (!ig.Sound.enabled || !window.Audio) {
                ig.Sound.enabled = false;
                return;
            }
            var probe = new Audio();
            for (var i = 0; i < ig.Sound.use.length; i++) {
                var format = ig.Sound.use[i];
                if (probe.canPlayType(format.mime)) {
                    this.format = format;
                    break;
                }
            }
            if (!this.format) {
                ig.Sound.enabled = false;
            }
        },
        load: function (path, multiChannel, loadCallback) {
            var realPath = ig.prefix + path.replace(/[^\.]+$/, this.format.ext) + ig.nocache;
            if (this.clips[path]) {
                if (multiChannel && this.clips[path].length < ig.Sound.channels) {
                    for (var i = this.clips[path].length; i < ig.Sound.channels; i++) {
                        var a = new Audio(realPath);
                        a.load();
                        this.clips[path].push(a);
                    }
                }
                return this.clips[path][0];
            }
            var clip = new Audio(realPath);
            if (loadCallback) {
                clip.addEventListener(
                    "canplaythrough",
                    function cb(ev) {
                        clip.removeEventListener("canplaythrough", cb, false);
                        loadCallback(path, true, ev);
                    },
                    false
                );
                clip.addEventListener(
                    "error",
                    function (ev) {
                        loadCallback(path, false, ev);
                    },
                    false
                );
            }
            clip.preload = "auto";
            clip.load();
            this.clips[path] = [clip];
            if (multiChannel) {
                for (var i = 1; i < ig.Sound.channels; i++) {
                    var a = new Audio(realPath);
                    a.load();
                    this.clips[path].push(a);
                }
            }
            return clip;
        },
        get: function (path) {
            var channels = this.clips[path];
            for (var i = 0, clip; (clip = channels[i++]); ) {
                if (clip.paused || clip.ended) {
                    if (clip.ended) {
                        clip.currentTime = 0;
                    }
                    return clip;
                }
            }
            channels[0].pause();
            channels[0].currentTime = 0;
            return channels[0];
        },
    });
    ig.Music = ig.Class.extend({
        tracks: [],
        namedTracks: {},
        currentTrack: null,
        currentIndex: 0,
        random: false,
        _volume: 1,
        _loop: false,
        _fadeInterval: 0,
        _fadeTimer: null,
        _endedCallbackBound: null,
        init: function () {
            this._endedCallbackBound = this._endedCallback.bind(this);
            if (Object.defineProperty) {
                Object.defineProperty(this, "volume", { get: this.getVolume.bind(this), set: this.setVolume.bind(this) });
                Object.defineProperty(this, "loop", { get: this.getLooping.bind(this), set: this.setLooping.bind(this) });
            } else if (this.__defineGetter__) {
                this.__defineGetter__("volume", this.getVolume.bind(this));
                this.__defineSetter__("volume", this.setVolume.bind(this));
                this.__defineGetter__("loop", this.getLooping.bind(this));
                this.__defineSetter__("loop", this.setLooping.bind(this));
            }
        },
        add: function (music, name) {
            if (!ig.Sound.enabled) {
                return;
            }
            var path = music instanceof ig.Sound ? music.path : music;
            var track = ig.soundManager.load(path, false);
            track.loop = this._loop;
            track.volume = this._volume;
            track.addEventListener("ended", this._endedCallbackBound, false);
            this.tracks.push(track);
            if (name) {
                this.namedTracks[name] = track;
            }
            if (!this.currentTrack) {
                this.currentTrack = track;
            }
        },
        next: function () {
            if (!this.tracks.length) {
                return;
            }
            this.stop();
            this.currentIndex = this.random ? Math.floor(Math.random() * this.tracks.length) : (this.currentIndex + 1) % this.tracks.length;
            this.currentTrack = this.tracks[this.currentIndex];
            this.play();
        },
        pause: function () {
            if (!this.currentTrack) {
                return;
            }
            this.currentTrack.pause();
        },
        stop: function () {
            if (!this.currentTrack) {
                return;
            }
            this.currentTrack.pause();
            this.currentTrack.currentTime = 0;
        },
        play: function (name) {
            if (name && this.namedTracks[name]) {
                var newTrack = this.namedTracks[name];
                if (newTrack != this.currentTrack) {
                    this.stop();
                    this.currentTrack = newTrack;
                }
            } else if (!this.currentTrack) {
                return;
            }
            this.currentTrack.play();
        },
        getLooping: function () {
            return this._loop;
        },
        setLooping: function (l) {
            this._loop = l;
            for (var i in this.tracks) {
                this.tracks[i].loop = l;
            }
        },
        getVolume: function () {
            return this._volume;
        },
        setVolume: function (v) {
            this._volume = v.limit(0, 1);
            for (var i in this.tracks) {
                this.tracks[i].volume = this._volume;
            }
        },
        fadeOut: function (time) {
            if (!this.currentTrack) {
                return;
            }
            clearInterval(this._fadeInterval);
            this.fadeTimer = new ig.Timer(time);
            this._fadeInterval = setInterval(this._fadeStep.bind(this), 50);
        },
        _fadeStep: function () {
            var v = this.fadeTimer.delta().map(-this.fadeTimer.target, 0, 1, 0).limit(0, 1) * this._volume;
            if (v <= 0.01) {
                this.stop();
                this.currentTrack.volume = this._volume;
                clearInterval(this._fadeInterval);
            } else {
                this.currentTrack.volume = v;
            }
        },
        _endedCallback: function () {
            if (this._loop) {
                this.play();
            } else {
                this.next();
            }
        },
    });
    ig.Sound = ig.Class.extend({
        path: "",
        volume: 1,
        currentClip: null,
        multiChannel: true,
        init: function (path, multiChannel) {
            this.path = path;
            this.multiChannel = multiChannel !== false;
            this.load();
        },
        load: function (loadCallback) {
            if (!ig.Sound.enabled) {
                if (loadCallback) {
                    loadCallback(this.path, true);
                }
                return;
            }
            if (ig.ready) {
                ig.soundManager.load(this.path, this.multiChannel, loadCallback);
            } else {
                ig.addResource(this);
            }
        },
        play: function () {
            if (!ig.Sound.enabled) {
                return;
            }
            this.currentClip = ig.soundManager.get(this.path);
            this.currentClip.volume = ig.soundManager.volume * this.volume;
            this.currentClip.play();
        },
        stop: function () {
            if (this.currentClip) {
                this.currentClip.pause();
                this.currentClip.currentTime = 0;
            }
        },
    });
    ig.Sound.FORMAT = {
        MP3: { ext: "mp3", mime: "audio/mpeg" },
        M4A: { ext: "m4a", mime: "audio/mp4; codecs=mp4a" },
        OGG: { ext: "ogg", mime: "audio/ogg; codecs=vorbis" },
        WEBM: { ext: "webm", mime: "audio/webm; codecs=vorbis" },
        CAF: { ext: "caf", mime: "audio/x-caf" },
    };
    ig.Sound.use = [ig.Sound.FORMAT.OGG, ig.Sound.FORMAT.MP3];
    ig.Sound.channels = 4;
    ig.Sound.enabled = true;
});

// lib/impact/loader.js
ig.baked = true;
ig.module("impact.loader")
    .requires("impact.image", "impact.font", "impact.sound")
    .defines(function () {
        "use strict";
        ig.Loader = ig.Class.extend({
            resources: [],
            gameClass: null,
            status: 0,
            done: false,
            _unloaded: [],
            _drawStatus: 0,
            _intervalId: 0,
            _loadCallbackBound: null,
            init: function (gameClass, resources) {
                this.gameClass = gameClass;
                this.resources = resources;
                this._loadCallbackBound = this._loadCallback.bind(this);
                for (var i = 0; i < this.resources.length; i++) {
                    this._unloaded.push(this.resources[i].path);
                }
            },
            load: function () {
                ig.system.clear("#000");
                if (!this.resources.length) {
                    this.end();
                    return;
                }
                for (var i = 0; i < this.resources.length; i++) {
                    this.loadResource(this.resources[i]);
                }
                this._intervalId = setInterval(this.draw.bind(this), 16);
            },
            loadResource: function (res) {
                res.load(this._loadCallbackBound);
            },
            end: function () {
                if (this.done) {
                    return;
                }
                this.done = true;
                clearInterval(this._intervalId);
                ig.system.setGame(this.gameClass);
            },
            draw: function () {
                this._drawStatus += (this.status - this._drawStatus) / 5;
                var s = ig.system.scale;
                var w = ig.system.width * 0.6;
                var h = ig.system.height * 0.1;
                var x = ig.system.width * 0.5 - w / 2;
                var y = ig.system.height * 0.5 - h / 2;
                ig.system.context.fillStyle = "#000";
                ig.system.context.fillRect(0, 0, 480, 320);
                ig.system.context.fillStyle = "#fff";
                ig.system.context.fillRect(x * s, y * s, w * s, h * s);
                ig.system.context.fillStyle = "#000";
                ig.system.context.fillRect(x * s + s, y * s + s, w * s - s - s, h * s - s - s);
                ig.system.context.fillStyle = "#fff";
                ig.system.context.fillRect(x * s, y * s, w * s * this._drawStatus, h * s);
            },
            _loadCallback: function (path, status) {
                if (status) {
                    this._unloaded.erase(path);
                } else {
                    throw "Failed to load resource: " + path;
                }
                this.status = 1 - this._unloaded.length / this.resources.length;
                if (this._unloaded.length == 0) {
                    setTimeout(this.end.bind(this), 250);
                }
            },
        });
    });

// lib/impact/timer.js
ig.baked = true;
ig.module("impact.timer").defines(function () {
    "use strict";
    ig.Timer = ig.Class.extend({
        target: 0,
        base: 0,
        last: 0,
        pausedAt: 0,
        init: function (seconds) {
            this.base = ig.Timer.time;
            this.last = ig.Timer.time;
            this.target = seconds || 0;
        },
        set: function (seconds) {
            this.target = seconds || 0;
            this.base = ig.Timer.time;
            this.pausedAt = 0;
        },
        reset: function () {
            this.base = ig.Timer.time;
            this.pausedAt = 0;
        },
        tick: function () {
            var delta = ig.Timer.time - this.last;
            this.last = ig.Timer.time;
            return this.pausedAt ? 0 : delta;
        },
        delta: function () {
            return (this.pausedAt || ig.Timer.time) - this.base - this.target;
        },
        pause: function () {
            if (!this.pausedAt) {
                this.pausedAt = ig.Timer.time;
            }
        },
        unpause: function () {
            if (this.pausedAt) {
                this.base += ig.Timer.time - this.pausedAt;
                this.pausedAt = 0;
            }
        },
    });
    ig.Timer._last = 0;
    ig.Timer.time = Number.MIN_VALUE;
    ig.Timer.timeScale = 1;
    ig.Timer.maxStep = 0.05;
    ig.Timer.step = function () {
        var current = Date.now();
        var delta = (current - ig.Timer._last) / 1000;
        ig.Timer.time += Math.min(delta, ig.Timer.maxStep) * ig.Timer.timeScale;
        ig.Timer._last = current;
    };
});

// lib/impact/system.js
ig.baked = true;
ig.module("impact.system")
    .requires("impact.timer", "impact.image")
    .defines(function () {
        "use strict";
        ig.System = ig.Class.extend({
            fps: 30,
            width: 320,
            height: 240,
            realWidth: 320,
            realHeight: 240,
            scale: 1,
            tick: 0,
            animationId: 0,
            newGameClass: null,
            running: false,
            delegate: null,
            clock: null,
            canvas: null,
            context: null,
            init: function (canvasId, fps, width, height, scale) {
                this.fps = fps;
                this.clock = new ig.Timer();
                this.canvas = ig.$(canvasId);
                this.resize(width, height, scale);
                this.context = this.canvas.getContext("2d");
                this.getDrawPos = ig.System.drawMode;
                if (this.scale != 1) {
                    ig.System.scaleMode = ig.System.SCALE.CRISP;
                }
                ig.System.scaleMode(this.canvas, this.context);
            },
            resize: function (width, height, scale) {
                this.width = width;
                this.height = height;
                this.scale = scale || this.scale;
                this.realWidth = this.width * this.scale;
                this.realHeight = this.height * this.scale;
                this.canvas.width = this.realWidth;
                this.canvas.height = this.realHeight;
            },
            setGame: function (gameClass) {
                if (this.running) {
                    this.newGameClass = gameClass;
                } else {
                    this.setGameNow(gameClass);
                }
            },
            setGameNow: function (gameClass) {
                ig.game = new gameClass();
                ig.system.setDelegate(ig.game);
            },
            setDelegate: function (object) {
                if (typeof object.run == "function") {
                    this.delegate = object;
                    this.startRunLoop();
                } else {
                    throw "System.setDelegate: No run() function in object";
                }
            },
            stopRunLoop: function () {
                ig.clearAnimation(this.animationId);
                this.running = false;
            },
            startRunLoop: function () {
                this.stopRunLoop();
                this.animationId = ig.setAnimation(this.run.bind(this), this.canvas);
                this.running = true;
            },
            clear: function (color) {
                this.context.fillStyle = color;
                this.context.fillRect(0, 0, this.realWidth, this.realHeight);
            },
            run: function () {
                ig.Timer.step();
                this.tick = this.clock.tick();
                this.delegate.run();
                ig.input.clearPressed();
                if (this.newGameClass) {
                    this.setGameNow(this.newGameClass);
                    this.newGameClass = null;
                }
            },
            getDrawPos: null,
        });
        ig.System.DRAW = {
            AUTHENTIC: function (p) {
                return Math.round(p) * this.scale;
            },
            SMOOTH: function (p) {
                return Math.round(p * this.scale);
            },
            SUBPIXEL: function (p) {
                return p * this.scale;
            },
        };
        ig.System.drawMode = ig.System.DRAW.SMOOTH;
        ig.System.SCALE = {
            CRISP: function (canvas, context) {
                ig.setVendorAttribute(context, "imageSmoothingEnabled", false);
                canvas.style.imageRendering = "-moz-crisp-edges";
                canvas.style.imageRendering = "-o-crisp-edges";
                canvas.style.imageRendering = "-webkit-optimize-contrast";
                canvas.style.imageRendering = "crisp-edges";
                canvas.style.msInterpolationMode = "nearest-neighbor";
            },
            SMOOTH: function (canvas, context) {
                ig.setVendorAttribute(context, "imageSmoothingEnabled", true);
                canvas.style.imageRendering = "";
                canvas.style.msInterpolationMode = "";
            },
        };
        ig.System.scaleMode = ig.System.SCALE.SMOOTH;
    });

// lib/impact/input.js
ig.baked = true;
ig.module("impact.input").defines(function () {
    "use strict";
    ig.KEY = {
        MOUSE1: -1,
        MOUSE2: -3,
        MWHEEL_UP: -4,
        MWHEEL_DOWN: -5,
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        PAUSE: 19,
        CAPS: 20,
        ESC: 27,
        SPACE: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        END: 35,
        HOME: 36,
        LEFT_ARROW: 37,
        UP_ARROW: 38,
        RIGHT_ARROW: 39,
        DOWN_ARROW: 40,
        INSERT: 45,
        DELETE: 46,
        _0: 48,
        _1: 49,
        _2: 50,
        _3: 51,
        _4: 52,
        _5: 53,
        _6: 54,
        _7: 55,
        _8: 56,
        _9: 57,
        A: 65,
        B: 66,
        C: 67,
        D: 68,
        E: 69,
        F: 70,
        G: 71,
        H: 72,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        M: 77,
        N: 78,
        O: 79,
        P: 80,
        Q: 81,
        R: 82,
        S: 83,
        T: 84,
        U: 85,
        V: 86,
        W: 87,
        X: 88,
        Y: 89,
        Z: 90,
        NUMPAD_0: 96,
        NUMPAD_1: 97,
        NUMPAD_2: 98,
        NUMPAD_3: 99,
        NUMPAD_4: 100,
        NUMPAD_5: 101,
        NUMPAD_6: 102,
        NUMPAD_7: 103,
        NUMPAD_8: 104,
        NUMPAD_9: 105,
        MULTIPLY: 106,
        ADD: 107,
        SUBSTRACT: 109,
        DECIMAL: 110,
        DIVIDE: 111,
        F1: 112,
        F2: 113,
        F3: 114,
        F4: 115,
        F5: 116,
        F6: 117,
        F7: 118,
        F8: 119,
        F9: 120,
        F10: 121,
        F11: 122,
        F12: 123,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        PLUS: 187,
        COMMA: 188,
        MINUS: 189,
        PERIOD: 190,
    };
    ig.Input = ig.Class.extend({
        bindings: {},
        actions: {},
        presses: {},
        locks: {},
        delayedKeyup: {},
        isUsingMouse: false,
        isUsingKeyboard: false,
        isUsingAccelerometer: false,
        mouse: { x: 0, y: 0 },
        accel: { x: 0, y: 0, z: 0 },
        initMouse: function () {
            if (this.isUsingMouse) {
                return;
            }
            this.isUsingMouse = true;
            var mouseWheelBound = this.mousewheel.bind(this);
            ig.system.canvas.addEventListener("mousewheel", mouseWheelBound, false);
            ig.system.canvas.addEventListener("DOMMouseScroll", mouseWheelBound, false);
            ig.system.canvas.addEventListener("contextmenu", this.contextmenu.bind(this), false);
            ig.system.canvas.addEventListener("mousedown", this.keydown.bind(this), false);
            ig.system.canvas.addEventListener("mouseup", this.keyup.bind(this), false);
            ig.system.canvas.addEventListener("mousemove", this.mousemove.bind(this), false);
            if (ig.ua.touchDevice) {
                ig.system.canvas.addEventListener("touchstart", this.keydown.bind(this), false);
                ig.system.canvas.addEventListener("touchend", this.keyup.bind(this), false);
                ig.system.canvas.addEventListener("touchmove", this.mousemove.bind(this), false);
                ig.system.canvas.addEventListener("MSPointerDown", this.keydown.bind(this), false);
                ig.system.canvas.addEventListener("MSPointerUp", this.keyup.bind(this), false);
                ig.system.canvas.addEventListener("MSPointerMove", this.mousemove.bind(this), false);
                ig.system.canvas.style.msTouchAction = "none";
            }
        },
        initKeyboard: function () {
            if (this.isUsingKeyboard) {
                return;
            }
            this.isUsingKeyboard = true;
            window.addEventListener("keydown", this.keydown.bind(this), false);
            window.addEventListener("keyup", this.keyup.bind(this), false);
        },
        initAccelerometer: function () {
            if (this.isUsingAccelerometer) {
                return;
            }
            window.addEventListener("devicemotion", this.devicemotion.bind(this), false);
        },
        mousewheel: function (event) {
            var delta = event.wheelDelta ? event.wheelDelta : event.detail * -1;
            var code = delta > 0 ? ig.KEY.MWHEEL_UP : ig.KEY.MWHEEL_DOWN;
            var action = this.bindings[code];
            if (action) {
                this.actions[action] = true;
                this.presses[action] = true;
                this.delayedKeyup[action] = true;
                event.stopPropagation();
                event.preventDefault();
            }
        },
        mousemove: function (event) {
            var internalWidth = parseInt(ig.system.canvas.offsetWidth) || ig.system.realWidth;
            var scale = ig.system.scale * (internalWidth / ig.system.realWidth);
            var pos = { left: 0, top: 0 };
            if (ig.system.canvas.getBoundingClientRect) {
                pos = ig.system.canvas.getBoundingClientRect();
            }
            var ev = event.touches ? event.touches[0] : event;
            this.mouse.x = (ev.clientX - pos.left) / scale;
            this.mouse.y = (ev.clientY - pos.top) / scale;
        },
        contextmenu: function (event) {
            if (this.bindings[ig.KEY.MOUSE2]) {
                event.stopPropagation();
                event.preventDefault();
            }
        },
        keydown: function (event) {
            var tag = event.target.tagName;
            if (tag == "INPUT" || tag == "TEXTAREA") {
                return;
            }
            var code = event.type == "keydown" ? event.keyCode : event.button == 2 ? ig.KEY.MOUSE2 : ig.KEY.MOUSE1;
            if (event.type == "touchstart" || event.type == "mousedown") {
                this.mousemove(event);
            }
            var action = this.bindings[code];
            if (action) {
                this.actions[action] = true;
                if (!this.locks[action]) {
                    this.presses[action] = true;
                    this.locks[action] = true;
                }
                event.stopPropagation();
                event.preventDefault();
            }
        },
        keyup: function (event) {
            var tag = event.target.tagName;
            if (tag == "INPUT" || tag == "TEXTAREA") {
                return;
            }
            var code = event.type == "keyup" ? event.keyCode : event.button == 2 ? ig.KEY.MOUSE2 : ig.KEY.MOUSE1;
            var action = this.bindings[code];
            if (action) {
                this.delayedKeyup[action] = true;
                event.stopPropagation();
                event.preventDefault();
            }
        },
        devicemotion: function (event) {
            this.accel = event.accelerationIncludingGravity;
        },
        bind: function (key, action) {
            if (key < 0) {
                this.initMouse();
            } else if (key > 0) {
                this.initKeyboard();
            }
            this.bindings[key] = action;
        },
        bindTouch: function (selector, action) {
            var element = ig.$(selector);
            var that = this;
            element.addEventListener(
                "touchstart",
                function (ev) {
                    that.touchStart(ev, action);
                },
                false
            );
            element.addEventListener(
                "touchend",
                function (ev) {
                    that.touchEnd(ev, action);
                },
                false
            );
            element.addEventListener(
                "MSPointerDown",
                function (ev) {
                    that.touchStart(ev, action);
                },
                false
            );
            element.addEventListener(
                "MSPointerUp",
                function (ev) {
                    that.touchEnd(ev, action);
                },
                false
            );
        },
        unbind: function (key) {
            var action = this.bindings[key];
            this.delayedKeyup[action] = true;
            this.bindings[key] = null;
        },
        unbindAll: function () {
            this.bindings = {};
            this.actions = {};
            this.presses = {};
            this.locks = {};
            this.delayedKeyup = {};
        },
        state: function (action) {
            return this.actions[action];
        },
        pressed: function (action) {
            return this.presses[action];
        },
        released: function (action) {
            return this.delayedKeyup[action];
        },
        clearPressed: function () {
            for (var action in this.delayedKeyup) {
                this.actions[action] = false;
                this.locks[action] = false;
            }
            this.delayedKeyup = {};
            this.presses = {};
        },
        touchStart: function (event, action) {
            this.actions[action] = true;
            this.presses[action] = true;
            event.stopPropagation();
            event.preventDefault();
            return false;
        },
        touchEnd: function (event, action) {
            this.delayedKeyup[action] = true;
            event.stopPropagation();
            event.preventDefault();
            return false;
        },
    });
});

// lib/impact/impact.js
ig.baked = true;
ig.module("impact.impact")
    .requires("dom.ready", "impact.loader", "impact.system", "impact.input", "impact.sound")
    .defines(function () {
        "use strict";
        ig.main = function (canvasId, gameClass, fps, width, height, scale, loaderClass) {
            ig.system = new ig.System(canvasId, fps, width, height, scale || 1);
            ig.input = new ig.Input();
            ig.soundManager = new ig.SoundManager();
            ig.music = new ig.Music();
            ig.ready = true;
            var loader = new (loaderClass || ig.Loader)(gameClass, ig.resources);
            loader.load();
        };
    });

// lib/impact/animation.js
ig.baked = true;
ig.module("impact.animation")
    .requires("impact.timer", "impact.image")
    .defines(function () {
        "use strict";
        ig.AnimationSheet = ig.Class.extend({
            width: 8,
            height: 8,
            image: null,
            init: function (path, width, height) {
                this.width = width;
                this.height = height;
                this.image = new ig.Image(path);
            },
        });
        ig.Animation = ig.Class.extend({
            sheet: null,
            timer: null,
            sequence: [],
            flip: { x: false, y: false },
            pivot: { x: 0, y: 0 },
            frame: 0,
            tile: 0,
            loopCount: 0,
            alpha: 1,
            angle: 0,
            init: function (sheet, frameTime, sequence, stop) {
                this.sheet = sheet;
                this.pivot = { x: sheet.width / 2, y: sheet.height / 2 };
                this.timer = new ig.Timer();
                this.frameTime = frameTime;
                this.sequence = sequence;
                this.stop = !!stop;
                this.tile = this.sequence[0];
            },
            rewind: function () {
                this.timer.set();
                this.loopCount = 0;
                this.tile = this.sequence[0];
                return this;
            },
            gotoFrame: function (f) {
                this.timer.set(this.frameTime * -f);
                this.update();
            },
            gotoRandomFrame: function () {
                this.gotoFrame(Math.floor(Math.random() * this.sequence.length));
            },
            update: function () {
                var frameTotal = Math.floor(this.timer.delta() / this.frameTime);
                this.loopCount = Math.floor(frameTotal / this.sequence.length);
                if (this.stop && this.loopCount > 0) {
                    this.frame = this.sequence.length - 1;
                } else {
                    this.frame = frameTotal % this.sequence.length;
                }
                this.tile = this.sequence[this.frame];
            },
            draw: function (targetX, targetY) {
                var bbsize = Math.max(this.sheet.width, this.sheet.height);
                if (targetX > ig.system.width || targetY > ig.system.height || targetX + bbsize < 0 || targetY + bbsize < 0) {
                    return;
                }
                if (this.alpha != 1) {
                    ig.system.context.globalAlpha = this.alpha;
                }
                if (this.angle == 0) {
                    this.sheet.image.drawTile(targetX, targetY, this.tile, this.sheet.width, this.sheet.height, this.flip.x, this.flip.y);
                } else {
                    ig.system.context.save();
                    ig.system.context.translate(ig.system.getDrawPos(targetX + this.pivot.x), ig.system.getDrawPos(targetY + this.pivot.y));
                    ig.system.context.rotate(this.angle);
                    this.sheet.image.drawTile(-this.pivot.x, -this.pivot.y, this.tile, this.sheet.width, this.sheet.height, this.flip.x, this.flip.y);
                    ig.system.context.restore();
                }
                if (this.alpha != 1) {
                    ig.system.context.globalAlpha = 1;
                }
            },
        });
    });

// lib/impact/entity.js
ig.baked = true;
ig.module("impact.entity")
    .requires("impact.animation", "impact.impact")
    .defines(function () {
        "use strict";
        ig.Entity = ig.Class.extend({
            id: 0,
            settings: {},
            size: { x: 16, y: 16 },
            offset: { x: 0, y: 0 },
            pos: { x: 0, y: 0 },
            last: { x: 0, y: 0 },
            vel: { x: 0, y: 0 },
            accel: { x: 0, y: 0 },
            friction: { x: 0, y: 0 },
            maxVel: { x: 100, y: 100 },
            zIndex: 0,
            gravityFactor: 1,
            standing: false,
            bounciness: 0,
            minBounceVelocity: 40,
            anims: {},
            animSheet: null,
            currentAnim: null,
            health: 10,
            type: 0,
            checkAgainst: 0,
            collides: 0,
            _killed: false,
            slopeStanding: { min: (44).toRad(), max: (136).toRad() },
            init: function (x, y, settings) {
                this.id = ++ig.Entity._lastId;
                this.pos.x = x;
                this.pos.y = y;
                ig.merge(this, settings);
            },
            addAnim: function (name, frameTime, sequence, stop) {
                if (!this.animSheet) {
                    throw "No animSheet to add the animation " + name + " to.";
                }
                var a = new ig.Animation(this.animSheet, frameTime, sequence, stop);
                this.anims[name] = a;
                if (!this.currentAnim) {
                    this.currentAnim = a;
                }
                return a;
            },
            update: function () {
                this.last.x = this.pos.x;
                this.last.y = this.pos.y;
                this.vel.y += ig.game.gravity * ig.system.tick * this.gravityFactor;
                this.vel.x = this.getNewVelocity(this.vel.x, this.accel.x, this.friction.x, this.maxVel.x);
                this.vel.y = this.getNewVelocity(this.vel.y, this.accel.y, this.friction.y, this.maxVel.y);
                var mx = this.vel.x * ig.system.tick;
                var my = this.vel.y * ig.system.tick;
                var res = ig.game.collisionMap.trace(this.pos.x, this.pos.y, mx, my, this.size.x, this.size.y);
                this.handleMovementTrace(res);
                if (this.currentAnim) {
                    this.currentAnim.update();
                }
            },
            getNewVelocity: function (vel, accel, friction, max) {
                if (accel) {
                    return (vel + accel * ig.system.tick).limit(-max, max);
                } else if (friction) {
                    var delta = friction * ig.system.tick;
                    if (vel - delta > 0) {
                        return vel - delta;
                    } else if (vel + delta < 0) {
                        return vel + delta;
                    } else {
                        return 0;
                    }
                }
                return vel.limit(-max, max);
            },
            handleMovementTrace: function (res) {
                this.standing = false;
                if (res.collision.y) {
                    if (this.bounciness > 0 && Math.abs(this.vel.y) > this.minBounceVelocity) {
                        this.vel.y *= -this.bounciness;
                    } else {
                        if (this.vel.y > 0) {
                            this.standing = true;
                        }
                        this.vel.y = 0;
                    }
                }
                if (res.collision.x) {
                    if (this.bounciness > 0 && Math.abs(this.vel.x) > this.minBounceVelocity) {
                        this.vel.x *= -this.bounciness;
                    } else {
                        this.vel.x = 0;
                    }
                }
                if (res.collision.slope) {
                    var s = res.collision.slope;
                    if (this.bounciness > 0) {
                        var proj = this.vel.x * s.nx + this.vel.y * s.ny;
                        this.vel.x = (this.vel.x - s.nx * proj * 2) * this.bounciness;
                        this.vel.y = (this.vel.y - s.ny * proj * 2) * this.bounciness;
                    } else {
                        var lengthSquared = s.x * s.x + s.y * s.y;
                        var dot = (this.vel.x * s.x + this.vel.y * s.y) / lengthSquared;
                        this.vel.x = s.x * dot;
                        this.vel.y = s.y * dot;
                        var angle = Math.atan2(s.x, s.y);
                        if (angle > this.slopeStanding.min && angle < this.slopeStanding.max) {
                            this.standing = true;
                        }
                    }
                }
                this.pos = res.pos;
            },
            draw: function () {
                if (this.currentAnim) {
                    this.currentAnim.draw(this.pos.x - this.offset.x - ig.game._rscreen.x, this.pos.y - this.offset.y - ig.game._rscreen.y);
                }
            },
            kill: function () {
                ig.game.removeEntity(this);
            },
            receiveDamage: function (amount, from) {
                this.health -= amount;
                if (this.health <= 0) {
                    this.kill();
                }
            },
            touches: function (other) {
                return !(this.pos.x >= other.pos.x + other.size.x || this.pos.x + this.size.x <= other.pos.x || this.pos.y >= other.pos.y + other.size.y || this.pos.y + this.size.y <= other.pos.y);
            },
            distanceTo: function (other) {
                var xd = this.pos.x + this.size.x / 2 - (other.pos.x + other.size.x / 2);
                var yd = this.pos.y + this.size.y / 2 - (other.pos.y + other.size.y / 2);
                return Math.sqrt(xd * xd + yd * yd);
            },
            angleTo: function (other) {
                return Math.atan2(other.pos.y + other.size.y / 2 - (this.pos.y + this.size.y / 2), other.pos.x + other.size.x / 2 - (this.pos.x + this.size.x / 2));
            },
            check: function (other) {},
            collideWith: function (other, axis) {},
            ready: function () {},
        });
        ig.Entity._lastId = 0;
        ig.Entity.COLLIDES = { NEVER: 0, LITE: 1, PASSIVE: 2, ACTIVE: 4, FIXED: 8 };
        ig.Entity.TYPE = { NONE: 0, A: 1, B: 2, BOTH: 3 };
        ig.Entity.checkPair = function (a, b) {
            if (a.checkAgainst & b.type) {
                a.check(b);
            }
            if (b.checkAgainst & a.type) {
                b.check(a);
            }
            if (a.collides && b.collides && a.collides + b.collides > ig.Entity.COLLIDES.ACTIVE) {
                ig.Entity.solveCollision(a, b);
            }
        };
        ig.Entity.solveCollision = function (a, b) {
            var weak = null;
            if (a.collides == ig.Entity.COLLIDES.LITE || b.collides == ig.Entity.COLLIDES.FIXED) {
                weak = a;
            } else if (b.collides == ig.Entity.COLLIDES.LITE || a.collides == ig.Entity.COLLIDES.FIXED) {
                weak = b;
            }
            if (a.last.x + a.size.x > b.last.x && a.last.x < b.last.x + b.size.x) {
                if (a.last.y < b.last.y) {
                    ig.Entity.seperateOnYAxis(a, b, weak);
                } else {
                    ig.Entity.seperateOnYAxis(b, a, weak);
                }
                a.collideWith(b, "y");
                b.collideWith(a, "y");
            } else if (a.last.y + a.size.y > b.last.y && a.last.y < b.last.y + b.size.y) {
                if (a.last.x < b.last.x) {
                    ig.Entity.seperateOnXAxis(a, b, weak);
                } else {
                    ig.Entity.seperateOnXAxis(b, a, weak);
                }
                a.collideWith(b, "x");
                b.collideWith(a, "x");
            }
        };
        ig.Entity.seperateOnXAxis = function (left, right, weak) {
            var nudge = left.pos.x + left.size.x - right.pos.x;
            if (weak) {
                var strong = left === weak ? right : left;
                weak.vel.x = -weak.vel.x * weak.bounciness + strong.vel.x;
                var resWeak = ig.game.collisionMap.trace(weak.pos.x, weak.pos.y, weak == left ? -nudge : nudge, 0, weak.size.x, weak.size.y);
                weak.pos.x = resWeak.pos.x;
            } else {
                var v2 = (left.vel.x - right.vel.x) / 2;
                left.vel.x = -v2;
                right.vel.x = v2;
                var resLeft = ig.game.collisionMap.trace(left.pos.x, left.pos.y, -nudge / 2, 0, left.size.x, left.size.y);
                left.pos.x = Math.floor(resLeft.pos.x);
                var resRight = ig.game.collisionMap.trace(right.pos.x, right.pos.y, nudge / 2, 0, right.size.x, right.size.y);
                right.pos.x = Math.ceil(resRight.pos.x);
            }
        };
        ig.Entity.seperateOnYAxis = function (top, bottom, weak) {
            var nudge = top.pos.y + top.size.y - bottom.pos.y;
            if (weak) {
                var strong = top === weak ? bottom : top;
                weak.vel.y = -weak.vel.y * weak.bounciness + strong.vel.y;
                var nudgeX = 0;
                if (weak == top && Math.abs(weak.vel.y - strong.vel.y) < weak.minBounceVelocity) {
                    weak.standing = true;
                    nudgeX = strong.vel.x * ig.system.tick;
                }
                var resWeak = ig.game.collisionMap.trace(weak.pos.x, weak.pos.y, nudgeX, weak == top ? -nudge : nudge, weak.size.x, weak.size.y);
                weak.pos.y = resWeak.pos.y;
                weak.pos.x = resWeak.pos.x;
            } else if (ig.game.gravity && (bottom.standing || top.vel.y > 0)) {
                var resTop = ig.game.collisionMap.trace(top.pos.x, top.pos.y, 0, -(top.pos.y + top.size.y - bottom.pos.y), top.size.x, top.size.y);
                top.pos.y = resTop.pos.y;
                if (top.bounciness > 0 && top.vel.y > top.minBounceVelocity) {
                    top.vel.y *= -top.bounciness;
                } else {
                    top.standing = true;
                    top.vel.y = 0;
                }
            } else {
                var v2 = (top.vel.y - bottom.vel.y) / 2;
                top.vel.y = -v2;
                bottom.vel.y = v2;
                var nudgeX = bottom.vel.x * ig.system.tick;
                var resTop = ig.game.collisionMap.trace(top.pos.x, top.pos.y, nudgeX, -nudge / 2, top.size.x, top.size.y);
                top.pos.y = resTop.pos.y;
                var resBottom = ig.game.collisionMap.trace(bottom.pos.x, bottom.pos.y, 0, nudge / 2, bottom.size.x, bottom.size.y);
                bottom.pos.y = resBottom.pos.y;
            }
        };
    });

// lib/impact/map.js
ig.baked = true;
ig.module("impact.map").defines(function () {
    "use strict";
    ig.Map = ig.Class.extend({
        tilesize: 8,
        width: 1,
        height: 1,
        data: [[]],
        name: null,
        init: function (tilesize, data) {
            this.tilesize = tilesize;
            this.data = data;
            this.height = data.length;
            this.width = data[0].length;
        },
        getTile: function (x, y) {
            var tx = Math.floor(x / this.tilesize);
            var ty = Math.floor(y / this.tilesize);
            if (tx >= 0 && tx < this.width && ty >= 0 && ty < this.height) {
                return this.data[ty][tx];
            } else {
                return 0;
            }
        },
        setTile: function (x, y, tile) {
            var tx = Math.floor(x / this.tilesize);
            var ty = Math.floor(y / this.tilesize);
            if (tx >= 0 && tx < this.width && ty >= 0 && ty < this.height) {
                this.data[ty][tx] = tile;
            }
        },
    });
});

// lib/impact/collision-map.js
ig.baked = true;
ig.module("impact.collision-map")
    .requires("impact.map")
    .defines(function () {
        "use strict";
        ig.CollisionMap = ig.Map.extend({
            lastSlope: 1,
            tiledef: null,
            init: function (tilesize, data, tiledef) {
                this.parent(tilesize, data);
                this.tiledef = tiledef || ig.CollisionMap.defaultTileDef;
                for (var t in this.tiledef) {
                    if (t | (0 > this.lastSlope)) {
                        this.lastSlope = t | 0;
                    }
                }
            },
            trace: function (x, y, vx, vy, objectWidth, objectHeight) {
                var res = { collision: { x: false, y: false, slope: false }, pos: { x: x, y: y }, tile: { x: 0, y: 0 } };
                var steps = Math.ceil(Math.max(Math.abs(vx), Math.abs(vy)) / this.tilesize);
                if (steps > 1) {
                    var sx = vx / steps;
                    var sy = vy / steps;
                    for (var i = 0; i < steps && (sx || sy); i++) {
                        this._traceStep(res, x, y, sx, sy, objectWidth, objectHeight, vx, vy, i);
                        x = res.pos.x;
                        y = res.pos.y;
                        if (res.collision.x) {
                            sx = 0;
                            vx = 0;
                        }
                        if (res.collision.y) {
                            sy = 0;
                            vy = 0;
                        }
                        if (res.collision.slope) {
                            break;
                        }
                    }
                } else {
                    this._traceStep(res, x, y, vx, vy, objectWidth, objectHeight, vx, vy, 0);
                }
                return res;
            },
            _traceStep: function (res, x, y, vx, vy, width, height, rvx, rvy, step) {
                res.pos.x += vx;
                res.pos.y += vy;
                var t = 0;
                if (vx) {
                    var pxOffsetX = vx > 0 ? width : 0;
                    var tileOffsetX = vx < 0 ? this.tilesize : 0;
                    var firstTileY = Math.max(Math.floor(y / this.tilesize), 0);
                    var lastTileY = Math.min(Math.ceil((y + height) / this.tilesize), this.height);
                    var tileX = Math.floor((res.pos.x + pxOffsetX) / this.tilesize);
                    var prevTileX = Math.floor((x + pxOffsetX) / this.tilesize);
                    if (step > 0 || tileX == prevTileX || prevTileX < 0 || prevTileX >= this.width) {
                        prevTileX = -1;
                    }
                    if (tileX >= 0 && tileX < this.width) {
                        for (var tileY = firstTileY; tileY < lastTileY; tileY++) {
                            if (prevTileX != -1) {
                                t = this.data[tileY][prevTileX];
                                if (t > 1 && t <= this.lastSlope && this._checkTileDef(res, t, x, y, rvx, rvy, width, height, prevTileX, tileY)) {
                                    break;
                                }
                            }
                            t = this.data[tileY][tileX];
                            if (t == 1 || t > this.lastSlope || (t > 1 && this._checkTileDef(res, t, x, y, rvx, rvy, width, height, tileX, tileY))) {
                                if (t > 1 && t <= this.lastSlope && res.collision.slope) {
                                    break;
                                }
                                res.collision.x = true;
                                res.tile.x = t;
                                x = res.pos.x = tileX * this.tilesize - pxOffsetX + tileOffsetX;
                                rvx = 0;
                                break;
                            }
                        }
                    }
                }
                if (vy) {
                    var pxOffsetY = vy > 0 ? height : 0;
                    var tileOffsetY = vy < 0 ? this.tilesize : 0;
                    var firstTileX = Math.max(Math.floor(res.pos.x / this.tilesize), 0);
                    var lastTileX = Math.min(Math.ceil((res.pos.x + width) / this.tilesize), this.width);
                    var tileY = Math.floor((res.pos.y + pxOffsetY) / this.tilesize);
                    var prevTileY = Math.floor((y + pxOffsetY) / this.tilesize);
                    if (step > 0 || tileY == prevTileY || prevTileY < 0 || prevTileY >= this.height) {
                        prevTileY = -1;
                    }
                    if (tileY >= 0 && tileY < this.height) {
                        for (var tileX = firstTileX; tileX < lastTileX; tileX++) {
                            if (prevTileY != -1) {
                                t = this.data[prevTileY][tileX];
                                if (t > 1 && t <= this.lastSlope && this._checkTileDef(res, t, x, y, rvx, rvy, width, height, tileX, prevTileY)) {
                                    break;
                                }
                            }
                            t = this.data[tileY][tileX];
                            if (t == 1 || t > this.lastSlope || (t > 1 && this._checkTileDef(res, t, x, y, rvx, rvy, width, height, tileX, tileY))) {
                                if (t > 1 && t <= this.lastSlope && res.collision.slope) {
                                    break;
                                }
                                res.collision.y = true;
                                res.tile.y = t;
                                res.pos.y = tileY * this.tilesize - pxOffsetY + tileOffsetY;
                                break;
                            }
                        }
                    }
                }
            },
            _checkTileDef: function (res, t, x, y, vx, vy, width, height, tileX, tileY) {
                var def = this.tiledef[t];
                if (!def) {
                    return false;
                }
                var lx = (tileX + def[0]) * this.tilesize,
                    ly = (tileY + def[1]) * this.tilesize,
                    lvx = (def[2] - def[0]) * this.tilesize,
                    lvy = (def[3] - def[1]) * this.tilesize,
                    solid = def[4];
                var tx = x + vx + (lvy < 0 ? width : 0) - lx,
                    ty = y + vy + (lvx > 0 ? height : 0) - ly;
                if (lvx * ty - lvy * tx > 0) {
                    if (vx * -lvy + vy * lvx < 0) {
                        return solid;
                    }
                    var length = Math.sqrt(lvx * lvx + lvy * lvy);
                    var nx = lvy / length,
                        ny = -lvx / length;
                    var proj = tx * nx + ty * ny;
                    var px = nx * proj,
                        py = ny * proj;
                    if (px * px + py * py >= vx * vx + vy * vy) {
                        return solid || lvx * (ty - vy) - lvy * (tx - vx) < 0.5;
                    }
                    res.pos.x = x + vx - px;
                    res.pos.y = y + vy - py;
                    res.collision.slope = { x: lvx, y: lvy, nx: nx, ny: ny };
                    return true;
                }
                return false;
            },
        });
        var H = 1 / 2,
            N = 1 / 3,
            M = 2 / 3,
            SOLID = true,
            NON_SOLID = false;
        ig.CollisionMap.defaultTileDef = {
            5: [0, 1, 1, M, SOLID],
            6: [0, M, 1, N, SOLID],
            7: [0, N, 1, 0, SOLID],
            3: [0, 1, 1, H, SOLID],
            4: [0, H, 1, 0, SOLID],
            2: [0, 1, 1, 0, SOLID],
            10: [H, 1, 1, 0, SOLID],
            21: [0, 1, H, 0, SOLID],
            32: [M, 1, 1, 0, SOLID],
            43: [N, 1, M, 0, SOLID],
            54: [0, 1, N, 0, SOLID],
            27: [0, 0, 1, N, SOLID],
            28: [0, N, 1, M, SOLID],
            29: [0, M, 1, 1, SOLID],
            25: [0, 0, 1, H, SOLID],
            26: [0, H, 1, 1, SOLID],
            24: [0, 0, 1, 1, SOLID],
            11: [0, 0, H, 1, SOLID],
            22: [H, 0, 1, 1, SOLID],
            33: [0, 0, N, 1, SOLID],
            44: [N, 0, M, 1, SOLID],
            55: [M, 0, 1, 1, SOLID],
            16: [1, N, 0, 0, SOLID],
            17: [1, M, 0, N, SOLID],
            18: [1, 1, 0, M, SOLID],
            14: [1, H, 0, 0, SOLID],
            15: [1, 1, 0, H, SOLID],
            13: [1, 1, 0, 0, SOLID],
            8: [H, 1, 0, 0, SOLID],
            19: [1, 1, H, 0, SOLID],
            30: [N, 1, 0, 0, SOLID],
            41: [M, 1, N, 0, SOLID],
            52: [1, 1, M, 0, SOLID],
            38: [1, M, 0, 1, SOLID],
            39: [1, N, 0, M, SOLID],
            40: [1, 0, 0, N, SOLID],
            36: [1, H, 0, 1, SOLID],
            37: [1, 0, 0, H, SOLID],
            35: [1, 0, 0, 1, SOLID],
            9: [1, 0, H, 1, SOLID],
            20: [H, 0, 0, 1, SOLID],
            31: [1, 0, M, 1, SOLID],
            42: [M, 0, N, 1, SOLID],
            53: [N, 0, 0, 1, SOLID],
            12: [0, 0, 1, 0, NON_SOLID],
            23: [1, 1, 0, 1, NON_SOLID],
            34: [1, 0, 1, 1, NON_SOLID],
            45: [0, 1, 0, 0, NON_SOLID],
        };
        ig.CollisionMap.staticNoCollision = {
            trace: function (x, y, vx, vy) {
                return { collision: { x: false, y: false, slope: false }, pos: { x: x + vx, y: y + vy }, tile: { x: 0, y: 0 } };
            },
        };
    });

// lib/impact/background-map.js
ig.baked = true;
ig.module("impact.background-map")
    .requires("impact.map", "impact.image")
    .defines(function () {
        "use strict";
        ig.BackgroundMap = ig.Map.extend({
            tiles: null,
            scroll: { x: 0, y: 0 },
            distance: 1,
            repeat: false,
            tilesetName: "",
            foreground: false,
            enabled: true,
            preRender: false,
            preRenderedChunks: null,
            chunkSize: 512,
            debugChunks: false,
            anims: {},
            init: function (tilesize, data, tileset) {
                this.parent(tilesize, data);
                this.setTileset(tileset);
            },
            setTileset: function (tileset) {
                this.tilesetName = tileset instanceof ig.Image ? tileset.path : tileset;
                this.tiles = new ig.Image(this.tilesetName);
                this.preRenderedChunks = null;
            },
            setScreenPos: function (x, y) {
                this.scroll.x = x / this.distance;
                this.scroll.y = y / this.distance;
            },
            preRenderMapToChunks: function () {
                var totalWidth = this.width * this.tilesize * ig.system.scale,
                    totalHeight = this.height * this.tilesize * ig.system.scale;
                this.chunkSize = Math.min(Math.max(totalWidth, totalHeight), this.chunkSize);
                var chunkCols = Math.ceil(totalWidth / this.chunkSize),
                    chunkRows = Math.ceil(totalHeight / this.chunkSize);
                this.preRenderedChunks = [];
                for (var y = 0; y < chunkRows; y++) {
                    this.preRenderedChunks[y] = [];
                    for (var x = 0; x < chunkCols; x++) {
                        var chunkWidth = x == chunkCols - 1 ? totalWidth - x * this.chunkSize : this.chunkSize;
                        var chunkHeight = y == chunkRows - 1 ? totalHeight - y * this.chunkSize : this.chunkSize;
                        this.preRenderedChunks[y][x] = this.preRenderChunk(x, y, chunkWidth, chunkHeight);
                    }
                }
            },
            preRenderChunk: function (cx, cy, w, h) {
                var tw = w / this.tilesize / ig.system.scale + 1,
                    th = h / this.tilesize / ig.system.scale + 1;
                var nx = ((cx * this.chunkSize) / ig.system.scale) % this.tilesize,
                    ny = ((cy * this.chunkSize) / ig.system.scale) % this.tilesize;
                var tx = Math.floor((cx * this.chunkSize) / this.tilesize / ig.system.scale),
                    ty = Math.floor((cy * this.chunkSize) / this.tilesize / ig.system.scale);
                var chunk = ig.$new("canvas");
                chunk.width = w;
                chunk.height = h;
                var oldContext = ig.system.context;
                ig.system.context = chunk.getContext("2d");
                for (var x = 0; x < tw; x++) {
                    for (var y = 0; y < th; y++) {
                        if (x + tx < this.width && y + ty < this.height) {
                            var tile = this.data[y + ty][x + tx];
                            if (tile) {
                                this.tiles.drawTile(x * this.tilesize - nx, y * this.tilesize - ny, tile - 1, this.tilesize);
                            }
                        }
                    }
                }
                ig.system.context = oldContext;
                return chunk;
            },
            draw: function () {
                if (!this.tiles.loaded || !this.enabled) {
                    return;
                }
                if (this.preRender) {
                    this.drawPreRendered();
                } else {
                    this.drawTiled();
                }
            },
            drawPreRendered: function () {
                if (!this.preRenderedChunks) {
                    this.preRenderMapToChunks();
                }
                var dx = ig.system.getDrawPos(this.scroll.x),
                    dy = ig.system.getDrawPos(this.scroll.y);
                if (this.repeat) {
                    var w = this.width * this.tilesize * ig.system.scale;
                    dx = ((dx % w) + w) % w;
                    var h = this.height * this.tilesize * ig.system.scale;
                    dy = ((dy % h) + h) % h;
                }
                var minChunkX = Math.max(Math.floor(dx / this.chunkSize), 0),
                    minChunkY = Math.max(Math.floor(dy / this.chunkSize), 0),
                    maxChunkX = Math.ceil((dx + ig.system.realWidth) / this.chunkSize),
                    maxChunkY = Math.ceil((dy + ig.system.realHeight) / this.chunkSize),
                    maxRealChunkX = this.preRenderedChunks[0].length,
                    maxRealChunkY = this.preRenderedChunks.length;
                if (!this.repeat) {
                    maxChunkX = Math.min(maxChunkX, maxRealChunkX);
                    maxChunkY = Math.min(maxChunkY, maxRealChunkY);
                }
                var nudgeY = 0;
                for (var cy = minChunkY; cy < maxChunkY; cy++) {
                    var nudgeX = 0;
                    for (var cx = minChunkX; cx < maxChunkX; cx++) {
                        var chunk = this.preRenderedChunks[cy % maxRealChunkY][cx % maxRealChunkX];
                        var x = -dx + cx * this.chunkSize - nudgeX;
                        var y = -dy + cy * this.chunkSize - nudgeY;
                        ig.system.context.drawImage(chunk, x, y);
                        ig.Image.drawCount++;
                        if (this.debugChunks) {
                            ig.system.context.strokeStyle = "#f0f";
                            ig.system.context.strokeRect(x, y, this.chunkSize, this.chunkSize);
                        }
                        if (this.repeat && chunk.width < this.chunkSize && x + chunk.width < ig.system.realWidth) {
                            nudgeX += this.chunkSize - chunk.width;
                            maxChunkX++;
                        }
                    }
                    if (this.repeat && chunk.height < this.chunkSize && y + chunk.height < ig.system.realHeight) {
                        nudgeY += this.chunkSize - chunk.height;
                        maxChunkY++;
                    }
                }
            },
            drawTiled: function () {
                var tile = 0,
                    anim = null,
                    tileOffsetX = (this.scroll.x / this.tilesize).toInt(),
                    tileOffsetY = (this.scroll.y / this.tilesize).toInt(),
                    pxOffsetX = this.scroll.x % this.tilesize,
                    pxOffsetY = this.scroll.y % this.tilesize,
                    pxMinX = -pxOffsetX - this.tilesize,
                    pxMinY = -pxOffsetY - this.tilesize,
                    pxMaxX = ig.system.width + this.tilesize - pxOffsetX,
                    pxMaxY = ig.system.height + this.tilesize - pxOffsetY;
                for (var mapY = -1, pxY = pxMinY; pxY < pxMaxY; mapY++, pxY += this.tilesize) {
                    var tileY = mapY + tileOffsetY;
                    if (tileY >= this.height || tileY < 0) {
                        if (!this.repeat) {
                            continue;
                        }
                        tileY = ((tileY % this.height) + this.height) % this.height;
                    }
                    for (var mapX = -1, pxX = pxMinX; pxX < pxMaxX; mapX++, pxX += this.tilesize) {
                        var tileX = mapX + tileOffsetX;
                        if (tileX >= this.width || tileX < 0) {
                            if (!this.repeat) {
                                continue;
                            }
                            tileX = ((tileX % this.width) + this.width) % this.width;
                        }
                        if ((tile = this.data[tileY][tileX])) {
                            if ((anim = this.anims[tile - 1])) {
                                anim.draw(pxX, pxY);
                            } else {
                                this.tiles.drawTile(pxX, pxY, tile - 1, this.tilesize);
                            }
                        }
                    }
                }
            },
        });
    });

// lib/impact/game.js
ig.baked = true;
ig.module("impact.game")
    .requires("impact.impact", "impact.entity", "impact.collision-map", "impact.background-map")
    .defines(function () {
        "use strict";
        ig.Game = ig.Class.extend({
            clearColor: "#000000",
            gravity: 0,
            screen: { x: 0, y: 0 },
            _rscreen: { x: 0, y: 0 },
            entities: [],
            namedEntities: {},
            collisionMap: ig.CollisionMap.staticNoCollision,
            backgroundMaps: [],
            backgroundAnims: {},
            autoSort: false,
            sortBy: null,
            cellSize: 64,
            _deferredKill: [],
            _levelToLoad: null,
            _doSortEntities: false,
            staticInstantiate: function () {
                this.sortBy = this.sortBy || ig.Game.SORT.Z_INDEX;
                ig.game = this;
                return null;
            },
            loadLevel: function (data) {
                this.screen = { x: 0, y: 0 };
                this.entities = [];
                this.namedEntities = {};
                for (var i = 0; i < data.entities.length; i++) {
                    var ent = data.entities[i];
                    this.spawnEntity(ent.type, ent.x, ent.y, ent.settings);
                }
                this.sortEntities();
                this.collisionMap = ig.CollisionMap.staticNoCollision;
                this.backgroundMaps = [];
                for (var i = 0; i < data.layer.length; i++) {
                    var ld = data.layer[i];
                    if (ld.name == "collision") {
                        this.collisionMap = new ig.CollisionMap(ld.tilesize, ld.data);
                    } else {
                        var newMap = new ig.BackgroundMap(ld.tilesize, ld.data, ld.tilesetName);
                        newMap.anims = this.backgroundAnims[ld.tilesetName] || {};
                        newMap.repeat = ld.repeat;
                        newMap.distance = ld.distance;
                        newMap.foreground = !!ld.foreground;
                        newMap.preRender = !!ld.preRender;
                        newMap.name = ld.name;
                        this.backgroundMaps.push(newMap);
                    }
                }
                for (var i = 0; i < this.entities.length; i++) {
                    this.entities[i].ready();
                }
            },
            loadLevelDeferred: function (data) {
                this._levelToLoad = data;
            },
            getMapByName: function (name) {
                if (name == "collision") {
                    return this.collisionMap;
                }
                for (var i = 0; i < this.backgroundMaps.length; i++) {
                    if (this.backgroundMaps[i].name == name) {
                        return this.backgroundMaps[i];
                    }
                }
                return null;
            },
            getEntityByName: function (name) {
                return this.namedEntities[name];
            },
            getEntitiesByType: function (type) {
                var entityClass = typeof type === "string" ? ig.global[type] : type;
                var a = [];
                for (var i = 0; i < this.entities.length; i++) {
                    var ent = this.entities[i];
                    if (ent instanceof entityClass && !ent._killed) {
                        a.push(ent);
                    }
                }
                return a;
            },
            spawnEntity: function (type, x, y, settings) {
                var entityClass = typeof type === "string" ? ig.global[type] : type;
                if (!entityClass) {
                    throw "Can't spawn entity of type " + type;
                }
                var ent = new entityClass(x, y, settings || {});
                this.entities.push(ent);
                if (ent.name) {
                    this.namedEntities[ent.name] = ent;
                }
                return ent;
            },
            sortEntities: function () {
                this.entities.sort(this.sortBy);
            },
            sortEntitiesDeferred: function () {
                this._doSortEntities = true;
            },
            removeEntity: function (ent) {
                if (ent.name) {
                    delete this.namedEntities[ent.name];
                }
                ent._killed = true;
                ent.type = ig.Entity.TYPE.NONE;
                ent.checkAgainst = ig.Entity.TYPE.NONE;
                ent.collides = ig.Entity.COLLIDES.NEVER;
                this._deferredKill.push(ent);
            },
            run: function () {
                this.update();
                this.draw();
            },
            update: function () {
                if (this._levelToLoad) {
                    this.loadLevel(this._levelToLoad);
                    this._levelToLoad = null;
                }
                if (this._doSortEntities || this.autoSort) {
                    this.sortEntities();
                    this._doSortEntities = false;
                }
                this.updateEntities();
                this.checkEntities();
                for (var i = 0; i < this._deferredKill.length; i++) {
                    this.entities.erase(this._deferredKill[i]);
                }
                this._deferredKill = [];
                for (var tileset in this.backgroundAnims) {
                    var anims = this.backgroundAnims[tileset];
                    for (var a in anims) {
                        anims[a].update();
                    }
                }
            },
            updateEntities: function () {
                for (var i = 0; i < this.entities.length; i++) {
                    var ent = this.entities[i];
                    if (!ent._killed) {
                        ent.update();
                    }
                }
            },
            draw: function () {
                if (this.clearColor) {
                    ig.system.clear(this.clearColor);
                }
                this._rscreen.x = ig.system.getDrawPos(this.screen.x) / ig.system.scale;
                this._rscreen.y = ig.system.getDrawPos(this.screen.y) / ig.system.scale;
                var mapIndex;
                for (mapIndex = 0; mapIndex < this.backgroundMaps.length; mapIndex++) {
                    var map = this.backgroundMaps[mapIndex];
                    if (map.foreground) {
                        break;
                    }
                    map.setScreenPos(this.screen.x, this.screen.y);
                    map.draw();
                }
                this.drawEntities();
                for (mapIndex; mapIndex < this.backgroundMaps.length; mapIndex++) {
                    var map = this.backgroundMaps[mapIndex];
                    map.setScreenPos(this.screen.x, this.screen.y);
                    map.draw();
                }
            },
            drawEntities: function () {
                for (var i = 0; i < this.entities.length; i++) {
                    this.entities[i].draw();
                }
            },
            checkEntities: function () {
                var hash = {};
                for (var e = 0; e < this.entities.length; e++) {
                    var entity = this.entities[e];
                    if (entity.type == ig.Entity.TYPE.NONE && entity.checkAgainst == ig.Entity.TYPE.NONE && entity.collides == ig.Entity.COLLIDES.NEVER) {
                        continue;
                    }
                    var checked = {},
                        xmin = Math.floor(entity.pos.x / this.cellSize),
                        ymin = Math.floor(entity.pos.y / this.cellSize),
                        xmax = Math.floor((entity.pos.x + entity.size.x) / this.cellSize) + 1,
                        ymax = Math.floor((entity.pos.y + entity.size.y) / this.cellSize) + 1;
                    for (var x = xmin; x < xmax; x++) {
                        for (var y = ymin; y < ymax; y++) {
                            if (!hash[x]) {
                                hash[x] = {};
                                hash[x][y] = [entity];
                            } else if (!hash[x][y]) {
                                hash[x][y] = [entity];
                            } else {
                                var cell = hash[x][y];
                                for (var c = 0; c < cell.length; c++) {
                                    if (entity.touches(cell[c]) && !checked[cell[c].id]) {
                                        checked[cell[c].id] = true;
                                        ig.Entity.checkPair(entity, cell[c]);
                                    }
                                }
                                cell.push(entity);
                            }
                        }
                    }
                }
            },
        });
        ig.Game.SORT = {
            Z_INDEX: function (a, b) {
                return a.zIndex - b.zIndex;
            },
            POS_X: function (a, b) {
                return a.pos.x + a.size.x - (b.pos.x + b.size.x);
            },
            POS_Y: function (a, b) {
                return a.pos.y + a.size.y - (b.pos.y + b.size.y);
            },
        };
    });

// lib/game/words.js
ig.baked = true;
ig.module("game.words").defines(function () {
    WORDS = {
        2: ["am", "an", "as", "at", "be", "by", "cs", "do", "go", "he", "if", "in", "is", "it", "me", "my", "no", "of", "oh", "on", "or", "pi", "re", "so", "to", "up", "us", "we"],
        3: [
            "act",
            "add",
            "age",
            "ago",
            "aid",
            "aim",
            "air",
            "all",
            "and",
            "any",
            "are",
            "arm",
            "art",
            "ask",
            "ate",
            "bad",
            "ban",
            "bar",
            "bed",
            "bet",
            "bid",
            "big",
            "bit",
            "box",
            "boy",
            "bug",
            "bus",
            "but",
            "buy",
            "can",
            "car",
            "cat",
            "cry",
            "cup",
            "cut",
            "day",
            "did",
            "die",
            "doe",
            "dog",
            "dry",
            "due",
            "eat",
            "end",
            "err",
            "eye",
            "fan",
            "far",
            "fed",
            "few",
            "fit",
            "fix",
            "fly",
            "for",
            "fry",
            "fun",
            "gap",
            "gas",
            "get",
            "got",
            "gun",
            "guy",
            "had",
            "has",
            "hat",
            "her",
            "hid",
            "him",
            "his",
            "hit",
            "hot",
            "how",
            "ice",
            "ill",
            "its",
            "job",
            "joy",
            "key",
            "kid",
            "law",
            "lay",
            "led",
            "leg",
            "let",
            "lie",
            "log",
            "lot",
            "low",
            "mad",
            "man",
            "map",
            "may",
            "men",
            "met",
            "mix",
            "mod",
            "net",
            "new",
            "nor",
            "not",
            "now",
            "odd",
            "off",
            "oil",
            "old",
            "one",
            "our",
            "out",
            "owe",
            "own",
            "pay",
            "pen",
            "per",
            "pop",
            "put",
            "ran",
            "raw",
            "red",
            "rid",
            "row",
            "run",
            "sad",
            "sat",
            "saw",
            "say",
            "see",
            "set",
            "sex",
            "she",
            "sit",
            "six",
            "son",
            "sum",
            "sun",
            "tax",
            "tea",
            "ten",
            "the",
            "tie",
            "tin",
            "too",
            "top",
            "try",
            "two",
            "use",
            "van",
            "via",
            "war",
            "was",
            "way",
            "who",
            "why",
            "win",
            "won",
            "yes",
            "yet",
            "you",
        ],
        4: [
            "able",
            "acts",
            "adds",
            "ages",
            "aims",
            "also",
            "area",
            "army",
            "asks",
            "away",
            "back",
            "ball",
            "band",
            "bank",
            "bars",
            "base",
            "bear",
            "been",
            "best",
            "bets",
            "bids",
            "bill",
            "bind",
            "bite",
            "bits",
            "blow",
            "blue",
            "boat",
            "body",
            "book",
            "boot",
            "bore",
            "both",
            "bugs",
            "bulk",
            "bury",
            "busy",
            "buys",
            "byte",
            "call",
            "came",
            "card",
            "care",
            "case",
            "cell",
            "cent",
            "char",
            "chip",
            "city",
            "club",
            "clue",
            "code",
            "cold",
            "come",
            "cope",
            "copy",
            "core",
            "cost",
            "cure",
            "cuts",
            "dare",
            "dark",
            "data",
            "date",
            "days",
            "dead",
            "deal",
            "dear",
            "deem",
            "deep",
            "desk",
            "died",
            "dies",
            "disc",
            "disk",
            "does",
            "done",
            "door",
            "down",
            "draw",
            "drew",
            "drop",
            "dumb",
            "dump",
            "duty",
            "each",
            "ease",
            "east",
            "easy",
            "eats",
            "edge",
            "edit",
            "else",
            "ends",
            "even",
            "ever",
            "eyes",
            "face",
            "fact",
            "fail",
            "fair",
            "fall",
            "farm",
            "fast",
            "fate",
            "fear",
            "feed",
            "feel",
            "feet",
            "fell",
            "felt",
            "file",
            "fill",
            "film",
            "find",
            "fine",
            "fire",
            "firm",
            "fish",
            "fits",
            "five",
            "flag",
            "flat",
            "flew",
            "flow",
            "folk",
            "food",
            "foot",
            "form",
            "four",
            "free",
            "from",
            "full",
            "fund",
            "gain",
            "game",
            "gave",
            "gets",
            "girl",
            "give",
            "glad",
            "goes",
            "gone",
            "good",
            "grew",
            "grow",
            "hack",
            "hair",
            "half",
            "hall",
            "hand",
            "hang",
            "hard",
            "harm",
            "hate",
            "have",
            "head",
            "hear",
            "heat",
            "held",
            "hell",
            "help",
            "here",
            "hide",
            "high",
            "hill",
            "hint",
            "hits",
            "hold",
            "hole",
            "home",
            "hope",
            "host",
            "hour",
            "huge",
            "hung",
            "hunt",
            "idea",
            "inch",
            "info",
            "into",
            "item",
            "jobs",
            "join",
            "joke",
            "jump",
            "junk",
            "just",
            "keen",
            "keep",
            "kept",
            "keys",
            "kill",
            "kind",
            "king",
            "knew",
            "know",
            "lack",
            "lady",
            "lain",
            "land",
            "last",
            "late",
            "laws",
            "lazy",
            "lead",
            "leaf",
            "left",
            "legs",
            "lend",
            "less",
            "lets",
            "lied",
            "lies",
            "life",
            "lift",
            "like",
            "line",
            "link",
            "list",
            "live",
            "load",
            "loan",
            "lock",
            "logs",
            "long",
            "look",
            "loop",
            "lose",
            "loss",
            "lost",
            "lots",
            "love",
            "luck",
            "made",
            "mail",
            "main",
            "make",
            "many",
            "mark",
            "mass",
            "mean",
            "meet",
            "mere",
            "mess",
            "mile",
            "mind",
            "mine",
            "miss",
            "mode",
            "more",
            "most",
            "move",
            "much",
            "must",
            "name",
            "near",
            "neck",
            "need",
            "news",
            "next",
            "nice",
            "nine",
            "none",
            "note",
            "numb",
            "obey",
            "odds",
            "omit",
            "once",
            "ones",
            "only",
            "onto",
            "open",
            "ours",
            "over",
            "owed",
            "owes",
            "pack",
            "page",
            "paid",
            "pain",
            "pair",
            "park",
            "part",
            "pass",
            "past",
            "path",
            "pays",
            "peak",
            "pick",
            "pile",
            "pint",
            "pipe",
            "plan",
            "play",
            "plea",
            "plot",
            "plug",
            "plus",
            "poem",
            "poet",
            "poll",
            "pool",
            "poor",
            "port",
            "post",
            "pull",
            "pure",
            "push",
            "puts",
            "putt",
            "quit",
            "race",
            "rain",
            "rare",
            "rate",
            "read",
            "real",
            "rely",
            "rest",
            "ride",
            "rids",
            "ring",
            "rise",
            "risk",
            "road",
            "role",
            "roll",
            "room",
            "root",
            "rule",
            "runs",
            "rush",
            "safe",
            "said",
            "sake",
            "sale",
            "same",
            "save",
            "says",
            "scan",
            "seek",
            "seem",
            "seen",
            "sees",
            "self",
            "sell",
            "send",
            "sent",
            "sets",
            "ship",
            "shop",
            "show",
            "shut",
            "side",
            "sign",
            "site",
            "sits",
            "size",
            "slip",
            "slow",
            "soft",
            "sold",
            "some",
            "soon",
            "sort",
            "spot",
            "stay",
            "step",
            "stop",
            "such",
            "suit",
            "sure",
            "take",
            "talk",
            "tank",
            "tape",
            "task",
            "team",
            "tell",
            "tend",
            "term",
            "test",
            "text",
            "than",
            "that",
            "them",
            "then",
            "they",
            "thin",
            "this",
            "thus",
            "tied",
            "ties",
            "till",
            "time",
            "told",
            "took",
            "town",
            "trap",
            "tree",
            "trip",
            "true",
            "tune",
            "turn",
            "type",
            "ugly",
            "unit",
            "upon",
            "used",
            "user",
            "uses",
            "vary",
            "vast",
            "very",
            "vice",
            "view",
            "vote",
            "wait",
            "walk",
            "wall",
            "want",
            "warm",
            "warn",
            "wash",
            "ways",
            "wear",
            "week",
            "well",
            "went",
            "were",
            "west",
            "what",
            "when",
            "whom",
            "wide",
            "wife",
            "wild",
            "will",
            "wind",
            "wine",
            "wins",
            "wire",
            "wise",
            "wish",
            "with",
            "word",
            "wore",
            "work",
            "worn",
            "year",
            "your",
            "zero",
        ],
        5: [
            "about",
            "above",
            "abuse",
            "acted",
            "added",
            "admit",
            "adopt",
            "after",
            "again",
            "agree",
            "ahead",
            "aimed",
            "alarm",
            "album",
            "alias",
            "alive",
            "allow",
            "alone",
            "along",
            "alter",
            "among",
            "amuse",
            "angle",
            "angry",
            "annoy",
            "apart",
            "apple",
            "apply",
            "areas",
            "argue",
            "arise",
            "aside",
            "asked",
            "avoid",
            "awake",
            "award",
            "aware",
            "awful",
            "backs",
            "badly",
            "based",
            "bases",
            "basic",
            "basis",
            "bears",
            "began",
            "begin",
            "begun",
            "being",
            "below",
            "binds",
            "bites",
            "black",
            "blame",
            "blank",
            "block",
            "board",
            "books",
            "borne",
            "bound",
            "boxes",
            "brand",
            "break",
            "brief",
            "bring",
            "broke",
            "brown",
            "build",
            "built",
            "bytes",
            "calls",
            "cards",
            "cares",
            "carry",
            "cases",
            "catch",
            "cause",
            "cease",
            "chain",
            "chair",
            "chaos",
            "chars",
            "cheap",
            "child",
            "chips",
            "chose",
            "claim",
            "class",
            "clean",
            "clear",
            "clock",
            "close",
            "coded",
            "codes",
            "comes",
            "costs",
            "could",
            "count",
            "court",
            "cover",
            "crash",
            "crazy",
            "crisp",
            "cross",
            "cycle",
            "daily",
            "dated",
            "dates",
            "datum",
            "deals",
            "dealt",
            "death",
            "deems",
            "delay",
            "depth",
            "digit",
            "dirty",
            "discs",
            "ditto",
            "doing",
            "doors",
            "doubt",
            "dozen",
            "drawn",
            "draws",
            "dream",
            "drink",
            "drive",
            "drops",
            "drove",
            "dying",
            "early",
            "earth",
            "eaten",
            "edits",
            "eight",
            "elect",
            "empty",
            "ended",
            "enemy",
            "enjoy",
            "enter",
            "entry",
            "equal",
            "error",
            "evens",
            "event",
            "every",
            "exact",
            "exist",
            "extra",
            "facts",
            "fails",
            "faith",
            "falls",
            "false",
            "fancy",
            "fatal",
            "fault",
            "feeds",
            "feels",
            "fewer",
            "field",
            "fight",
            "filed",
            "files",
            "fills",
            "final",
            "finds",
            "first",
            "fixed",
            "fixes",
            "flash",
            "flied",
            "flies",
            "float",
            "floor",
            "flown",
            "folks",
            "force",
            "forms",
            "forth",
            "found",
            "frame",
            "fresh",
            "fries",
            "front",
            "fully",
            "funds",
            "funny",
            "gains",
            "games",
            "given",
            "gives",
            "glass",
            "going",
            "goods",
            "grand",
            "grant",
            "graph",
            "grave",
            "great",
            "green",
            "grind",
            "gross",
            "group",
            "grown",
            "grows",
            "guard",
            "guess",
            "guide",
            "habit",
            "hands",
            "handy",
            "hangs",
            "happy",
            "heads",
            "heard",
            "hears",
            "heart",
            "heavy",
            "hello",
            "helps",
            "hence",
            "hides",
            "hints",
            "holds",
            "holes",
            "hoped",
            "hopes",
            "horse",
            "hotel",
            "hours",
            "house",
            "human",
            "hurry",
            "ideal",
            "ideas",
            "image",
            "imply",
            "index",
            "inner",
            "input",
            "issue",
            "items",
            "joins",
            "joint",
            "judge",
            "jumps",
            "keeps",
            "kills",
            "kinds",
            "knock",
            "known",
            "knows",
            "label",
            "lacks",
            "lands",
            "large",
            "lasts",
            "later",
            "leach",
            "leads",
            "learn",
            "least",
            "leave",
            "legal",
            "level",
            "light",
            "liked",
            "likes",
            "limit",
            "lines",
            "links",
            "lists",
            "lived",
            "lives",
            "loads",
            "local",
            "locks",
            "logic",
            "looks",
            "loose",
            "lorry",
            "loses",
            "lower",
            "lucky",
            "lunch",
            "lying",
            "magic",
            "major",
            "makes",
            "march",
            "marks",
            "marry",
            "match",
            "maybe",
            "means",
            "meant",
            "media",
            "meets",
            "merit",
            "messy",
            "metal",
            "might",
            "miles",
            "minds",
            "minor",
            "mixed",
            "mixes",
            "model",
            "money",
            "month",
            "moral",
            "mouth",
            "moved",
            "moves",
            "movie",
            "music",
            "naive",
            "named",
            "names",
            "nasty",
            "needs",
            "never",
            "nicer",
            "night",
            "noise",
            "noisy",
            "north",
            "noted",
            "notes",
            "novel",
            "occur",
            "offer",
            "often",
            "older",
            "omits",
            "opens",
            "order",
            "other",
            "ought",
            "outer",
            "owing",
            "owner",
            "pages",
            "pairs",
            "paper",
            "parts",
            "party",
            "patch",
            "pause",
            "payed",
            "peace",
            "phase",
            "phone",
            "picks",
            "piece",
            "place",
            "plain",
            "plane",
            "plans",
            "plant",
            "plays",
            "plots",
            "point",
            "posts",
            "pound",
            "power",
            "press",
            "price",
            "prime",
            "print",
            "prior",
            "prone",
            "proof",
            "prove",
            "pulls",
            "putts",
            "queue",
            "quick",
            "quiet",
            "quite",
            "quits",
            "quote",
            "radio",
            "raise",
            "range",
            "rapid",
            "rates",
            "reach",
            "react",
            "reads",
            "ready",
            "refer",
            "reply",
            "right",
            "river",
            "rooms",
            "rough",
            "round",
            "route",
            "rules",
            "sadly",
            "safer",
            "saint",
            "sales",
            "saved",
            "saves",
            "scale",
            "scene",
            "score",
            "scrap",
            "seeks",
            "seems",
            "sells",
            "sends",
            "sense",
            "serve",
            "seven",
            "shall",
            "shame",
            "shape",
            "share",
            "sharp",
            "sheet",
            "shelf",
            "shell",
            "shift",
            "shoot",
            "shops",
            "short",
            "shown",
            "shows",
            "shuts",
            "sides",
            "sight",
            "signs",
            "silly",
            "since",
            "sites",
            "sizes",
            "skill",
            "sleep",
            "small",
            "smile",
            "solid",
            "solve",
            "sorry",
            "sorts",
            "sound",
            "south",
            "space",
            "spare",
            "speak",
            "speed",
            "spell",
            "spend",
            "spent",
            "spite",
            "split",
            "spoke",
            "spots",
            "staff",
            "stage",
            "stand",
            "start",
            "state",
            "stays",
            "steal",
            "stick",
            "still",
            "stock",
            "stone",
            "stood",
            "stops",
            "store",
            "stuck",
            "study",
            "stuff",
            "style",
            "sugar",
            "suits",
            "table",
            "taken",
            "takes",
            "talks",
            "tanks",
            "tapes",
            "tasks",
            "taste",
            "teach",
            "teeth",
            "tells",
            "tends",
            "terms",
            "tests",
            "thank",
            "their",
            "there",
            "these",
            "thing",
            "think",
            "third",
            "those",
            "three",
            "threw",
            "throw",
            "tight",
            "timed",
            "times",
            "title",
            "today",
            "token",
            "tooth",
            "topic",
            "total",
            "touch",
            "trace",
            "track",
            "train",
            "traps",
            "trash",
            "treat",
            "trees",
            "trial",
            "trick",
            "tried",
            "tries",
            "truck",
            "truly",
            "trunk",
            "trust",
            "truth",
            "turns",
            "twice",
            "tying",
            "typed",
            "types",
            "under",
            "unite",
            "units",
            "until",
            "upper",
            "upset",
            "usage",
            "users",
            "using",
            "usual",
            "vague",
            "valid",
            "value",
            "video",
            "views",
            "visit",
            "vital",
            "voice",
            "votes",
            "waits",
            "walks",
            "walls",
            "wants",
            "warns",
            "waste",
            "watch",
            "water",
            "wears",
            "weeks",
            "weird",
            "wheel",
            "where",
            "which",
            "while",
            "white",
            "whole",
            "whose",
            "wider",
            "wills",
            "woman",
            "women",
            "words",
            "works",
            "world",
            "worry",
            "worse",
            "worst",
            "worth",
            "would",
            "write",
            "wrong",
            "wrote",
            "years",
            "young",
            "yours",
        ],
        6: [
            "accept",
            "access",
            "accord",
            "across",
            "acting",
            "action",
            "active",
            "actual",
            "adding",
            "adjust",
            "admits",
            "adopts",
            "advice",
            "advise",
            "affair",
            "affect",
            "afford",
            "afraid",
            "agency",
            "agreed",
            "agrees",
            "aiming",
            "allows",
            "almost",
            "alters",
            "always",
            "amount",
            "amused",
            "amuses",
            "animal",
            "annoys",
            "annual",
            "answer",
            "anyone",
            "anyway",
            "appeal",
            "appear",
            "argued",
            "argues",
            "arises",
            "around",
            "arrive",
            "artist",
            "asking",
            "asleep",
            "aspect",
            "assume",
            "assure",
            "attach",
            "attack",
            "attend",
            "author",
            "autumn",
            "avoids",
            "backed",
            "basing",
            "became",
            "become",
            "before",
            "begins",
            "behalf",
            "behave",
            "behind",
            "belong",
            "better",
            "beyond",
            "bigger",
            "binary",
            "biting",
            "bitten",
            "boards",
            "bodies",
            "borrow",
            "bother",
            "bottle",
            "bottom",
            "bought",
            "branch",
            "breach",
            "breaks",
            "bridge",
            "bright",
            "brings",
            "broken",
            "bucket",
            "budget",
            "buffer",
            "builds",
            "buried",
            "buries",
            "button",
            "buying",
            "called",
            "cannot",
            "caught",
            "caused",
            "causes",
            "chance",
            "change",
            "charge",
            "choice",
            "choose",
            "chosen",
            "church",
            "circle",
            "claims",
            "clears",
            "clever",
            "closed",
            "closer",
            "closes",
            "coding",
            "coffee",
            "column",
            "coming",
            "common",
            "copied",
            "copies",
            "corner",
            "counts",
            "county",
            "couple",
            "course",
            "covers",
            "create",
            "credit",
            "crisis",
            "crisps",
            "cursor",
            "cycles",
            "damage",
            "danger",
            "dating",
            "debate",
            "decade",
            "decent",
            "decide",
            "deduce",
            "deemed",
            "deeply",
            "define",
            "degree",
            "delete",
            "demand",
            "depend",
            "derive",
            "design",
            "desire",
            "detail",
            "detect",
            "device",
            "devote",
            "differ",
            "digits",
            "dinner",
            "direct",
            "divide",
            "dollar",
            "domain",
            "double",
            "dozens",
            "driven",
            "driver",
            "drives",
            "during",
            "easier",
            "easily",
            "eating",
            "edited",
            "editor",
            "effect",
            "effort",
            "either",
            "elects",
            "enable",
            "ending",
            "enough",
            "ensure",
            "enters",
            "entire",
            "entity",
            "eraser",
            "errors",
            "escape",
            "evened",
            "events",
            "except",
            "excess",
            "excuse",
            "exists",
            "expand",
            "expect",
            "expert",
            "extend",
            "extent",
            "factor",
            "failed",
            "fairly",
            "fallen",
            "family",
            "famous",
            "faster",
            "father",
            "faults",
            "fewest",
            "fields",
            "figure",
            "filing",
            "filled",
            "finger",
            "finish",
            "finite",
            "firmly",
            "fiscal",
            "fishes",
            "fitted",
            "fixing",
            "flight",
            "floats",
            "flying",
            "follow",
            "forced",
            "forces",
            "forget",
            "forgot",
            "formal",
            "format",
            "formed",
            "former",
            "fourth",
            "freely",
            "french",
            "friend",
            "future",
            "gained",
            "garden",
            "gather",
            "giving",
            "global",
            "gotten",
            "grands",
            "grants",
            "grinds",
            "ground",
            "groups",
            "growth",
            "habits",
            "handed",
            "handle",
            "hanged",
            "happen",
            "harder",
            "hardly",
            "having",
            "headed",
            "header",
            "health",
            "helped",
            "hereby",
            "hidden",
            "hiding",
            "higher",
            "highly",
            "honest",
            "hoping",
            "horses",
            "ignore",
            "images",
            "impact",
            "impose",
            "inches",
            "income",
            "indeed",
            "inform",
            "inputs",
            "insert",
            "inside",
            "insist",
            "intend",
            "invent",
            "invite",
            "issued",
            "issues",
            "itself",
            "joined",
            "killed",
            "kindly",
            "knocks",
            "labels",
            "lacked",
            "ladies",
            "landed",
            "larger",
            "latest",
            "latter",
            "layout",
            "leaded",
            "leader",
            "learns",
            "leaved",
            "leaves",
            "length",
            "lesser",
            "lesson",
            "letter",
            "levels",
            "liable",
            "lights",
            "likely",
            "liking",
            "limits",
            "linear",
            "linked",
            "listed",
            "listen",
            "little",
            "living",
            "loaded",
            "locked",
            "logged",
            "longer",
            "looked",
            "losing",
            "loudly",
            "lowest",
            "mainly",
            "making",
            "manage",
            "manner",
            "manual",
            "marked",
            "market",
            "master",
            "matter",
            "medium",
            "member",
            "memory",
            "merely",
            "merits",
            "method",
            "middle",
            "minded",
            "minute",
            "misled",
            "missed",
            "misses",
            "misuse",
            "mixing",
            "models",
            "modern",
            "modify",
            "moment",
            "months",
            "mostly",
            "mother",
            "motion",
            "moving",
            "myself",
            "namely",
            "naming",
            "nation",
            "nature",
            "nearby",
            "nearer",
            "nearly",
            "needed",
            "nicest",
            "nobody",
            "normal",
            "notice",
            "notify",
            "noting",
            "number",
            "object",
            "obtain",
            "occupy",
            "occurs",
            "offers",
            "office",
            "oldest",
            "opened",
            "oppose",
            "option",
            "orders",
            "origin",
            "others",
            "output",
            "owners",
            "packet",
            "papers",
            "parent",
            "partly",
            "passed",
            "passes",
            "paying",
            "people",
            "period",
            "permit",
            "person",
            "petrol",
            "phrase",
            "picked",
            "pieces",
            "placed",
            "places",
            "planet",
            "played",
            "please",
            "plenty",
            "pocket",
            "points",
            "police",
            "policy",
            "posted",
            "pounds",
            "powers",
            "prefer",
            "pretty",
            "prices",
            "prints",
            "prompt",
            "proper",
            "proved",
            "proves",
            "public",
            "pulled",
            "purely",
            "pushed",
            "pushes",
            "putted",
            "quoted",
            "quotes",
            "raised",
            "raises",
            "random",
            "rarely",
            "rather",
            "reader",
            "really",
            "reason",
            "recall",
            "recent",
            "record",
            "reduce",
            "refers",
            "refuse",
            "regard",
            "region",
            "regret",
            "reject",
            "relate",
            "remain",
            "remark",
            "remind",
            "remote",
            "remove",
            "repair",
            "repeat",
            "report",
            "resort",
            "result",
            "retain",
            "return",
            "reveal",
            "review",
            "rights",
            "rubber",
            "safely",
            "safest",
            "safety",
            "sample",
            "saving",
            "saying",
            "scheme",
            "school",
            "scores",
            "screen",
            "script",
            "search",
            "season",
            "second",
            "secret",
            "secure",
            "seeing",
            "seemed",
            "select",
            "senior",
            "serial",
            "series",
            "served",
            "server",
            "serves",
            "settle",
            "severe",
            "shared",
            "shares",
            "should",
            "showed",
            "signal",
            "signed",
            "simple",
            "simply",
            "single",
            "skills",
            "slight",
            "slower",
            "slowly",
            "smooth",
            "social",
            "solely",
            "solved",
            "solves",
            "sooner",
            "sorted",
            "sought",
            "sounds",
            "source",
            "spaces",
            "speaks",
            "speech",
            "spells",
            "spends",
            "spirit",
            "splits",
            "spoken",
            "spread",
            "spring",
            "square",
            "stable",
            "stages",
            "stands",
            "starts",
            "stated",
            "states",
            "status",
            "stayed",
            "sticks",
            "stones",
            "stored",
            "stores",
            "stream",
            "street",
            "strict",
            "strike",
            "string",
            "strong",
            "struck",
            "stupid",
            "submit",
            "subset",
            "subtle",
            "sudden",
            "suffer",
            "suited",
            "summer",
            "supply",
            "surely",
            "survey",
            "switch",
            "symbol",
            "syntax",
            "system",
            "tables",
            "taking",
            "talked",
            "target",
            "taught",
            "tested",
            "thanks",
            "theory",
            "things",
            "thinks",
            "though",
            "threat",
            "thrown",
            "throws",
            "ticket",
            "timing",
            "titles",
            "topics",
            "toward",
            "tracks",
            "trains",
            "travel",
            "treats",
            "trusts",
            "trying",
            "turned",
            "twelve",
            "twenty",
            "typing",
            "unable",
            "unique",
            "unless",
            "unlike",
            "update",
            "upsets",
            "useful",
            "values",
            "varied",
            "varies",
            "vastly",
            "vector",
            "virtue",
            "vision",
            "volume",
            "waited",
            "walked",
            "wanted",
            "warned",
            "wasted",
            "wastes",
            "weapon",
            "weight",
            "wheels",
            "whilst",
            "widely",
            "widest",
            "willed",
            "window",
            "winter",
            "wished",
            "wishes",
            "within",
            "wonder",
            "wooden",
            "worded",
            "worked",
            "worker",
            "worthy",
            "writer",
            "writes",
            "yellow",
        ],
        7: [
            "ability",
            "absence",
            "accepts",
            "accords",
            "account",
            "achieve",
            "acquire",
            "actions",
            "address",
            "adopted",
            "advance",
            "advised",
            "advises",
            "affairs",
            "affects",
            "against",
            "allowed",
            "already",
            "altered",
            "amongst",
            "amounts",
            "amusing",
            "ancient",
            "annoyed",
            "another",
            "answers",
            "anybody",
            "apology",
            "appears",
            "applied",
            "applies",
            "approve",
            "arguing",
            "arrange",
            "arrived",
            "arrives",
            "article",
            "aspects",
            "assumed",
            "assumes",
            "assured",
            "assures",
            "attempt",
            "attends",
            "attract",
            "authors",
            "average",
            "avoided",
            "awkward",
            "backing",
            "balance",
            "battery",
            "bearing",
            "because",
            "becomes",
            "believe",
            "belongs",
            "benefit",
            "besides",
            "betting",
            "between",
            "bidding",
            "biggest",
            "binding",
            "biology",
            "bizarre",
            "borrows",
            "bothers",
            "bracket",
            "briefly",
            "brother",
            "brought",
            "burying",
            "calling",
            "capable",
            "capital",
            "captain",
            "careful",
            "carried",
            "carries",
            "catches",
            "causing",
            "central",
            "century",
            "certain",
            "chances",
            "changed",
            "changes",
            "channel",
            "chapter",
            "charged",
            "charges",
            "cheaper",
            "checked",
            "chooses",
            "circuit",
            "citizen",
            "claimed",
            "clarify",
            "classes",
            "cleared",
            "clearer",
            "clearly",
            "closely",
            "closest",
            "closing",
            "collect",
            "college",
            "combine",
            "command",
            "comment",
            "company",
            "compare",
            "complex",
            "compose",
            "compute",
            "concept",
            "concern",
            "confirm",
            "confuse",
            "connect",
            "consist",
            "contact",
            "contain",
            "content",
            "context",
            "control",
            "convert",
            "copying",
            "corners",
            "correct",
            "corrupt",
            "costing",
            "council",
            "counted",
            "counter",
            "country",
            "courses",
            "covered",
            "crashed",
            "crashes",
            "created",
            "creates",
            "culture",
            "cumming",
            "curious",
            "current",
            "cutting",
            "damaged",
            "damages",
            "dealing",
            "decided",
            "decides",
            "declare",
            "deeming",
            "default",
            "defined",
            "defines",
            "degrees",
            "deleted",
            "deletes",
            "deliver",
            "demands",
            "depends",
            "derived",
            "derives",
            "designs",
            "desired",
            "desires",
            "despite",
            "destroy",
            "details",
            "detects",
            "develop",
            "devices",
            "devoted",
            "devotes",
            "digital",
            "directs",
            "discuss",
            "dislike",
            "display",
            "distant",
            "disturb",
            "divided",
            "divides",
            "drastic",
            "drawing",
            "drivers",
            "driving",
            "dropped",
            "dubious",
            "earlier",
            "easiest",
            "economy",
            "editing",
            "edition",
            "editors",
            "effects",
            "efforts",
            "elected",
            "element",
            "enables",
            "ensured",
            "ensures",
            "entered",
            "entitle",
            "entries",
            "equally",
            "evening",
            "exactly",
            "examine",
            "example",
            "exclude",
            "execute",
            "existed",
            "expands",
            "expects",
            "expense",
            "experts",
            "explain",
            "express",
            "extends",
            "extract",
            "extreme",
            "factors",
            "failing",
            "failure",
            "falling",
            "farther",
            "fashion",
            "fastest",
            "feature",
            "federal",
            "feeding",
            "feeling",
            "figures",
            "filling",
            "finally",
            "finding",
            "fingers",
            "firstly",
            "fitting",
            "flashed",
            "flashes",
            "floated",
            "follows",
            "forcing",
            "foreign",
            "forever",
            "forgets",
            "forming",
            "fortune",
            "forward",
            "freedom",
            "friends",
            "further",
            "gaining",
            "garbage",
            "general",
            "genuine",
            "getting",
            "granted",
            "graphic",
            "greater",
            "greatly",
            "grosses",
            "grounds",
            "growing",
            "guessed",
            "guesses",
            "handing",
            "handled",
            "handles",
            "hanging",
            "happens",
            "happily",
            "hardest",
            "harmful",
            "heading",
            "healthy",
            "hearing",
            "heavily",
            "helpful",
            "helping",
            "herself",
            "highest",
            "himself",
            "history",
            "hitting",
            "holding",
            "holiday",
            "however",
            "hundred",
            "husband",
            "ignored",
            "ignores",
            "illegal",
            "imagine",
            "implied",
            "implies",
            "imposed",
            "imposes",
            "improve",
            "incline",
            "include",
            "informs",
            "initial",
            "inserts",
            "insists",
            "install",
            "instant",
            "instead",
            "integer",
            "intends",
            "invalid",
            "invents",
            "invited",
            "invites",
            "involve",
            "isolate",
            "issuing",
            "joining",
            "justify",
            "keeping",
            "killing",
            "knocked",
            "knowing",
            "lacking",
            "landing",
            "largely",
            "largest",
            "leading",
            "leaving",
            "lecture",
            "legally",
            "lessons",
            "letters",
            "letting",
            "library",
            "limited",
            "linking",
            "listing",
            "loading",
            "locking",
            "logging",
            "logical",
            "longest",
            "looking",
            "machine",
            "managed",
            "manager",
            "manages",
            "manuals",
            "marking",
            "massive",
            "matches",
            "matters",
            "maximum",
            "meaning",
            "measure",
            "medical",
            "mediums",
            "meeting",
            "members",
            "mention",
            "message",
            "methods",
            "million",
            "minding",
            "minimal",
            "minimum",
            "minutes",
            "mislead",
            "missing",
            "mistake",
            "mistook",
            "monitor",
            "morning",
            "natural",
            "naughty",
            "nearest",
            "needing",
            "neither",
            "nervous",
            "network",
            "nothing",
            "noticed",
            "notices",
            "nowhere",
            "numbers",
            "numbest",
            "objects",
            "obscure",
            "observe",
            "obtains",
            "obvious",
            "offered",
            "officer",
            "offices",
            "omitted",
            "opening",
            "operate",
            "opinion",
            "opposed",
            "opposes",
            "options",
            "ordered",
            "outside",
            "overall",
            "package",
            "painful",
            "partial",
            "parties",
            "passing",
            "patient",
            "pattern",
            "perfect",
            "perform",
            "perhaps",
            "permits",
            "persons",
            "phrases",
            "picking",
            "picture",
            "placing",
            "planned",
            "plastic",
            "playing",
            "pleased",
            "pleases",
            "pointed",
            "popular",
            "posting",
            "precise",
            "prefers",
            "prepare",
            "present",
            "pressed",
            "presses",
            "presume",
            "prevent",
            "primary",
            "printed",
            "printer",
            "private",
            "problem",
            "process",
            "produce",
            "product",
            "project",
            "promise",
            "propose",
            "protect",
            "protest",
            "provide",
            "proving",
            "publish",
            "pulling",
            "purpose",
            "pushing",
            "putting",
            "qualify",
            "quality",
            "quarter",
            "quicker",
            "quickly",
            "quietly",
            "quoting",
            "raising",
            "rapidly",
            "reached",
            "reaches",
            "readers",
            "readily",
            "reading",
            "reality",
            "reasons",
            "receive",
            "records",
            "recover",
            "reduced",
            "reduces",
            "reflect",
            "refused",
            "refuses",
            "regards",
            "regular",
            "rejects",
            "related",
            "relates",
            "release",
            "remains",
            "remarks",
            "reminds",
            "removal",
            "removed",
            "removes",
            "repeats",
            "replace",
            "replied",
            "replies",
            "reports",
            "request",
            "require",
            "reserve",
            "respect",
            "respond",
            "restart",
            "restore",
            "results",
            "returns",
            "reveals",
            "reverse",
            "rewrite",
            "ridding",
            "roughly",
            "routine",
            "rubbish",
            "running",
            "satisfy",
            "schools",
            "science",
            "scratch",
            "screens",
            "seconds",
            "section",
            "seeking",
            "seeming",
            "selects",
            "selling",
            "seminar",
            "sending",
            "serious",
            "service",
            "serving",
            "session",
            "setting",
            "settled",
            "settles",
            "several",
            "sharing",
            "shopped",
            "shorter",
            "shortly",
            "showing",
            "signals",
            "signing",
            "similar",
            "simpler",
            "sitting",
            "slowest",
            "smaller",
            "society",
            "solving",
            "somehow",
            "someone",
            "soonest",
            "sorting",
            "sounded",
            "sources",
            "speaker",
            "special",
            "specify",
            "spotted",
            "spreads",
            "started",
            "stating",
            "station",
            "staying",
            "stopped",
            "storage",
            "storing",
            "strange",
            "strikes",
            "strings",
            "student",
            "studied",
            "studies",
            "subject",
            "submits",
            "succeed",
            "success",
            "suffers",
            "suffice",
            "suggest",
            "suiting",
            "summary",
            "support",
            "suppose",
            "surface",
            "survive",
            "suspect",
            "suspend",
            "symbols",
            "systems",
            "talking",
            "teacher",
            "teaches",
            "tedious",
            "telling",
            "testing",
            "thereby",
            "thought",
            "through",
            "tickets",
            "tonight",
            "totally",
            "touched",
            "touches",
            "towards",
            "traffic",
            "trained",
            "trapped",
            "treated",
            "trivial",
            "trouble",
            "trusted",
            "turning",
            "typical",
            "unaware",
            "unclear",
            "unhappy",
            "uniform",
            "unknown",
            "unusual",
            "updated",
            "updates",
            "upwards",
            "useless",
            "usually",
            "utility",
            "utterly",
            "vaguely",
            "variety",
            "various",
            "varying",
            "version",
            "visible",
            "waiting",
            "walking",
            "wanting",
            "warning",
            "wasting",
            "watched",
            "watches",
            "wearing",
            "weather",
            "weekend",
            "welcome",
            "western",
            "whereas",
            "whereby",
            "whether",
            "whoever",
            "willing",
            "windows",
            "winning",
            "wishing",
            "without",
            "wonders",
            "wording",
            "workers",
            "working",
            "worried",
            "worries",
            "writing",
            "written",
        ],
        8: [
            "absolute",
            "academic",
            "accepted",
            "accident",
            "accorded",
            "accounts",
            "accuracy",
            "accurate",
            "achieved",
            "achieves",
            "acquired",
            "acquires",
            "activity",
            "actually",
            "addition",
            "adequate",
            "admitted",
            "adopting",
            "advanced",
            "advances",
            "advising",
            "affected",
            "agreeing",
            "allowing",
            "altering",
            "although",
            "analogue",
            "analysis",
            "announce",
            "annoying",
            "answered",
            "anyplace",
            "anything",
            "anywhere",
            "apparent",
            "appeared",
            "applying",
            "approach",
            "approval",
            "approved",
            "approves",
            "argument",
            "arranged",
            "arranges",
            "arriving",
            "articles",
            "assembly",
            "assuming",
            "assuring",
            "attached",
            "attaches",
            "attempts",
            "attended",
            "attitude",
            "audience",
            "avoiding",
            "becoming",
            "believed",
            "believes",
            "benefits",
            "borrowed",
            "bothered",
            "brackets",
            "branches",
            "breaking",
            "bringing",
            "building",
            "bulletin",
            "business",
            "campaign",
            "capacity",
            "carrying",
            "cassette",
            "catching",
            "category",
            "chairman",
            "changing",
            "channels",
            "charging",
            "cheapest",
            "checking",
            "chemical",
            "children",
            "choosing",
            "claiming",
            "clearest",
            "clearing",
            "collapse",
            "collects",
            "colleges",
            "combined",
            "combines",
            "commands",
            "comments",
            "commonly",
            "compared",
            "compares",
            "compiler",
            "complain",
            "complete",
            "composed",
            "composes",
            "computed",
            "computer",
            "computes",
            "concerns",
            "concrete",
            "confirms",
            "confused",
            "confuses",
            "connects",
            "consider",
            "consists",
            "constant",
            "contains",
            "contents",
            "continue",
            "contract",
            "contrary",
            "contrast",
            "controls",
            "convince",
            "corrects",
            "corrupts",
            "counting",
            "covering",
            "crashing",
            "creating",
            "creation",
            "creature",
            "critical",
            "customer",
            "damaging",
            "database",
            "deciding",
            "decision",
            "declared",
            "declares",
            "decrease",
            "dedicate",
            "defining",
            "definite",
            "deleting",
            "delivers",
            "delivery",
            "depended",
            "deriving",
            "describe",
            "designed",
            "desiring",
            "destroys",
            "detailed",
            "detected",
            "develops",
            "devoting",
            "directed",
            "directly",
            "director",
            "disagree",
            "disaster",
            "discount",
            "discover",
            "displays",
            "distance",
            "distinct",
            "district",
            "disturbs",
            "dividing",
            "division",
            "document",
            "doubtful",
            "dropping",
            "earliest",
            "economic",
            "electing",
            "election",
            "electric",
            "elements",
            "elevator",
            "emphasis",
            "employee",
            "engineer",
            "enormous",
            "ensuring",
            "entering",
            "entirely",
            "entitled",
            "entitles",
            "entrance",
            "estimate",
            "evenings",
            "everyone",
            "evidence",
            "examined",
            "examines",
            "examples",
            "exchange",
            "excluded",
            "excludes",
            "executed",
            "executes",
            "exercise",
            "existing",
            "expanded",
            "expected",
            "explains",
            "explicit",
            "extended",
            "external",
            "facility",
            "familiar",
            "farthest",
            "feasible",
            "features",
            "feedback",
            "finished",
            "finishes",
            "flashing",
            "flexible",
            "floating",
            "followed",
            "fraction",
            "frequent",
            "friendly",
            "function",
            "furthest",
            "gasoline",
            "generate",
            "governor",
            "graduate",
            "granting",
            "graphics",
            "grateful",
            "greatest",
            "grinding",
            "guessing",
            "handling",
            "happened",
            "hardware",
            "harmless",
            "holidays",
            "horrible",
            "hospital",
            "hundreds",
            "identify",
            "identity",
            "ignoring",
            "implying",
            "imposing",
            "improved",
            "improves",
            "incident",
            "inclined",
            "inclines",
            "included",
            "includes",
            "increase",
            "indicate",
            "industry",
            "inferior",
            "infinite",
            "informed",
            "initials",
            "innocent",
            "inputted",
            "inserted",
            "insisted",
            "installs",
            "instance",
            "integers",
            "integral",
            "intended",
            "interact",
            "interest",
            "internal",
            "interval",
            "invented",
            "inviting",
            "involved",
            "involves",
            "irritate",
            "isolated",
            "isolates",
            "keyboard",
            "knocking",
            "language",
            "learning",
            "lectures",
            "lifetime",
            "likewise",
            "limiting",
            "location",
            "machines",
            "magnetic",
            "maintain",
            "majority",
            "managing",
            "marriage",
            "material",
            "meanings",
            "measured",
            "measures",
            "mechanic",
            "meetings",
            "mentions",
            "messages",
            "midnight",
            "military",
            "millions",
            "minority",
            "misleads",
            "mistaken",
            "mistakes",
            "modified",
            "modifies",
            "mornings",
            "movement",
            "multiple",
            "national",
            "negative",
            "networks",
            "nonsense",
            "normally",
            "noticing",
            "nowadays",
            "numerous",
            "objected",
            "observed",
            "observes",
            "obtained",
            "occasion",
            "occupied",
            "occupies",
            "occurred",
            "offering",
            "official",
            "omitting",
            "operated",
            "operates",
            "operator",
            "opinions",
            "opposing",
            "opposite",
            "optional",
            "ordering",
            "ordinary",
            "original",
            "packages",
            "parallel",
            "patterns",
            "peculiar",
            "performs",
            "personal",
            "persuade",
            "physical",
            "pictures",
            "planning",
            "pleasant",
            "pleasing",
            "pointing",
            "policies",
            "position",
            "positive",
            "possible",
            "possibly",
            "powerful",
            "prepared",
            "prepares",
            "presence",
            "presents",
            "preserve",
            "pressing",
            "pressure",
            "prevents",
            "previous",
            "printers",
            "printing",
            "printout",
            "probably",
            "problems",
            "produced",
            "produces",
            "products",
            "progress",
            "projects",
            "promised",
            "promises",
            "promptly",
            "properly",
            "property",
            "proposal",
            "proposed",
            "proposes",
            "prospect",
            "protects",
            "provided",
            "provides",
            "publicly",
            "puncture",
            "purchase",
            "purposes",
            "quantity",
            "question",
            "quickest",
            "quitting",
            "randomly",
            "reaching",
            "reaction",
            "readable",
            "received",
            "receives",
            "recently",
            "recorded",
            "recovers",
            "reducing",
            "referred",
            "reflects",
            "refusing",
            "regarded",
            "register",
            "rejected",
            "relating",
            "relation",
            "relative",
            "released",
            "releases",
            "relevant",
            "reliable",
            "religion",
            "remained",
            "remember",
            "reminded",
            "remotely",
            "removing",
            "repeated",
            "replaced",
            "replaces",
            "replying",
            "reported",
            "requests",
            "required",
            "requires",
            "research",
            "reserved",
            "reserves",
            "resident",
            "resource",
            "respects",
            "response",
            "restored",
            "restores",
            "restrict",
            "resulted",
            "returned",
            "revealed",
            "sciences",
            "searched",
            "searches",
            "secondly",
            "sections",
            "security",
            "selected",
            "sensible",
            "sensibly",
            "sentence",
            "separate",
            "sequence",
            "services",
            "sessions",
            "settling",
            "severely",
            "shopping",
            "shortage",
            "shortest",
            "shutting",
            "simplest",
            "slightly",
            "smallest",
            "software",
            "solution",
            "somebody",
            "sometime",
            "somewhat",
            "sounding",
            "southern",
            "speakers",
            "speaking",
            "specific",
            "spelling",
            "spending",
            "spotting",
            "standard",
            "standing",
            "starting",
            "stations",
            "sticking",
            "stopping",
            "straight",
            "strategy",
            "strength",
            "strictly",
            "striking",
            "strongly",
            "students",
            "studying",
            "subjects",
            "suddenly",
            "suffered",
            "suggests",
            "suitable",
            "suitably",
            "superior",
            "supplied",
            "supplies",
            "supports",
            "supposed",
            "supposes",
            "surprise",
            "survived",
            "survives",
            "suspects",
            "suspends",
            "switched",
            "switches",
            "teaching",
            "tendency",
            "terminal",
            "terribly",
            "thinking",
            "thoughts",
            "thousand",
            "throwing",
            "together",
            "tomorrow",
            "touching",
            "training",
            "transfer",
            "trapping",
            "treating",
            "trusting",
            "ultimate",
            "unlikely",
            "unwanted",
            "updating",
            "vacation",
            "validity",
            "valuable",
            "variable",
            "versions",
            "watching",
            "welcomed",
            "welcomes",
            "whatever",
            "whenever",
            "wherever",
            "withdraw",
            "wondered",
            "worrying",
            "yourself",
        ],
        9: [
            "abilities",
            "accepting",
            "according",
            "achieving",
            "acquiring",
            "addressed",
            "addresses",
            "admitting",
            "advancing",
            "advantage",
            "advertise",
            "affecting",
            "afternoon",
            "agreement",
            "algorithm",
            "alternate",
            "ambiguous",
            "anonymous",
            "answering",
            "apologies",
            "appearing",
            "approving",
            "arbitrary",
            "arguments",
            "arranging",
            "assembler",
            "assistant",
            "associate",
            "attaching",
            "attempted",
            "attending",
            "attention",
            "authority",
            "automatic",
            "available",
            "backwards",
            "basically",
            "beautiful",
            "beginning",
            "believing",
            "borrowing",
            "bothering",
            "broadcast",
            "buildings",
            "calculate",
            "candidate",
            "cardboard",
            "carefully",
            "certainly",
            "character",
            "collected",
            "combining",
            "commented",
            "committee",
            "community",
            "comparing",
            "complains",
            "complaint",
            "completed",
            "completes",
            "component",
            "composing",
            "computers",
            "computing",
            "concerned",
            "condition",
            "confident",
            "confirmed",
            "confusing",
            "confusion",
            "connected",
            "considers",
            "construct",
            "contained",
            "continued",
            "continues",
            "convinced",
            "convinces",
            "corrected",
            "correctly",
            "corrupted",
            "criticism",
            "currently",
            "dangerous",
            "decisions",
            "declaring",
            "dedicated",
            "dedicates",
            "delivered",
            "depending",
            "described",
            "describes",
            "designing",
            "desirable",
            "desperate",
            "destroyed",
            "detailing",
            "detecting",
            "determine",
            "developed",
            "different",
            "difficult",
            "directing",
            "direction",
            "directory",
            "disappear",
            "discovers",
            "discussed",
            "discusses",
            "displayed",
            "disturbed",
            "documents",
            "education",
            "effective",
            "efficient",
            "elsewhere",
            "embarrass",
            "emergency",
            "encounter",
            "encourage",
            "engineers",
            "entitling",
            "equipment",
            "essential",
            "establish",
            "everybody",
            "examining",
            "excellent",
            "exception",
            "excessive",
            "excluding",
            "exclusive",
            "executing",
            "existence",
            "expanding",
            "expansion",
            "expecting",
            "expensive",
            "explained",
            "expressed",
            "expresses",
            "extending",
            "extension",
            "extensive",
            "extremely",
            "financial",
            "finishing",
            "following",
            "forgotten",
            "functions",
            "generally",
            "generated",
            "generates",
            "gradually",
            "guarantee",
            "happening",
            "hopefully",
            "identical",
            "immediate",
            "implement",
            "important",
            "improving",
            "inability",
            "inclining",
            "including",
            "incorrect",
            "increased",
            "increases",
            "indicates",
            "influence",
            "informing",
            "initially",
            "inputting",
            "inserting",
            "insisting",
            "installed",
            "instantly",
            "insurance",
            "intending",
            "intention",
            "interests",
            "interface",
            "interpret",
            "intervals",
            "introduce",
            "inventing",
            "invisible",
            "involving",
            "irritated",
            "irritates",
            "isolating",
            "justified",
            "justifies",
            "knowledge",
            "languages",
            "libraries",
            "literally",
            "locations",
            "magnitude",
            "maintains",
            "materials",
            "measuring",
            "mechanics",
            "mechanism",
            "mentioned",
            "mistaking",
            "modifying",
            "movements",
            "naturally",
            "necessary",
            "necessity",
            "numerical",
            "objecting",
            "objection",
            "observing",
            "obtaining",
            "obviously",
            "occasions",
            "occupying",
            "occurring",
            "operating",
            "operation",
            "operators",
            "otherwise",
            "ourselves",
            "paragraph",
            "partially",
            "perfectly",
            "performed",
            "permanent",
            "permitted",
            "persuaded",
            "persuades",
            "pointless",
            "political",
            "positions",
            "potential",
            "practical",
            "precisely",
            "preferred",
            "preparing",
            "presented",
            "president",
            "prevented",
            "primitive",
            "principle",
            "procedure",
            "processed",
            "processes",
            "processor",
            "producing",
            "promising",
            "proposing",
            "protected",
            "providing",
            "publicity",
            "published",
            "publishes",
            "qualified",
            "qualifies",
            "questions",
            "receiving",
            "reception",
            "recommend",
            "recording",
            "recovered",
            "reduction",
            "redundant",
            "reference",
            "referring",
            "reflected",
            "regarding",
            "registers",
            "regularly",
            "rejecting",
            "releasing",
            "relevance",
            "religious",
            "reluctant",
            "remaining",
            "remembers",
            "reminding",
            "repeating",
            "replacing",
            "reporting",
            "represent",
            "reproduce",
            "requested",
            "requiring",
            "reserving",
            "resourced",
            "resources",
            "responses",
            "restoring",
            "restricts",
            "resulting",
            "returning",
            "revealing",
            "satisfied",
            "satisfies",
            "searching",
            "secondary",
            "secretary",
            "selecting",
            "selection",
            "sensitive",
            "sentences",
            "sequences",
            "seriously",
            "similarly",
            "sincerely",
            "situation",
            "solutions",
            "someplace",
            "something",
            "sometimes",
            "somewhere",
            "specially",
            "specified",
            "specifies",
            "splitting",
            "spreading",
            "standards",
            "statement",
            "statistic",
            "structure",
            "submitted",
            "suffering",
            "suggested",
            "supplying",
            "supported",
            "supposing",
            "surprised",
            "surprises",
            "surviving",
            "suspected",
            "suspended",
            "suspicion",
            "switching",
            "technical",
            "technique",
            "telephone",
            "temporary",
            "terminals",
            "therefore",
            "thousands",
            "transfers",
            "translate",
            "transport",
            "treatment",
            "uncertain",
            "universal",
            "unlimited",
            "upsetting",
            "vacations",
            "variables",
            "variation",
            "virtually",
            "welcoming",
            "wonderful",
            "wondering",
            "yesterday",
        ],
        10: [
            "absolutely",
            "acceptable",
            "accessible",
            "accidental",
            "activities",
            "additional",
            "addressing",
            "admittedly",
            "advantages",
            "advertised",
            "advertises",
            "algorithms",
            "altogether",
            "apparently",
            "appearance",
            "appreciate",
            "arithmetic",
            "artificial",
            "associated",
            "associates",
            "assumption",
            "atmosphere",
            "attempting",
            "attractive",
            "automobile",
            "background",
            "beforehand",
            "broadcasts",
            "categories",
            "characters",
            "collecting",
            "collection",
            "commenting",
            "commercial",
            "commission",
            "commitment",
            "comparable",
            "comparison",
            "compatible",
            "complained",
            "complaints",
            "completely",
            "completing",
            "complexity",
            "complicate",
            "components",
            "compromise",
            "compulsory",
            "concerning",
            "conclusion",
            "conditions",
            "conference",
            "confirming",
            "connecting",
            "connection",
            "considered",
            "consistent",
            "constraint",
            "containing",
            "continuing",
            "continuous",
            "contribute",
            "controlled",
            "convenient",
            "convention",
            "convincing",
            "correcting",
            "correction",
            "corrupting",
            "dedicating",
            "definitely",
            "definition",
            "definitive",
            "deliberate",
            "delivering",
            "democratic",
            "department",
            "describing",
            "destroying",
            "determined",
            "determines",
            "developing",
            "dictionary",
            "difference",
            "difficulty",
            "directions",
            "disappears",
            "discipline",
            "discourage",
            "discovered",
            "discussing",
            "discussion",
            "displaying",
            "distinctly",
            "distribute",
            "disturbing",
            "documented",
            "electronic",
            "encounters",
            "encouraged",
            "encourages",
            "engineered",
            "equivalent",
            "especially",
            "eventually",
            "everything",
            "everywhere",
            "exceptions",
            "experience",
            "experiment",
            "explaining",
            "expressing",
            "expression",
            "facilities",
            "forgetting",
            "frequently",
            "generating",
            "generation",
            "government",
            "guaranteed",
            "guarantees",
            "historical",
            "implements",
            "importance",
            "impossible",
            "impression",
            "inadequate",
            "incomplete",
            "increasing",
            "indication",
            "individual",
            "industrial",
            "inevitably",
            "installing",
            "interested",
            "interprets",
            "introduced",
            "introduces",
            "invariably",
            "invitation",
            "irrelevant",
            "irritating",
            "justifying",
            "laboratory",
            "literature",
            "maintained",
            "meaningful",
            "membership",
            "mentioning",
            "misleading",
            "mysterious",
            "objections",
            "occasional",
            "operations",
            "opposition",
            "originally",
            "particular",
            "performing",
            "permission",
            "permitting",
            "personally",
            "persuading",
            "phenomenon",
            "philosophy",
            "population",
            "postmaster",
            "preferable",
            "preferably",
            "preference",
            "preferring",
            "presenting",
            "presumably",
            "preventing",
            "previously",
            "principles",
            "processing",
            "processors",
            "production",
            "programmer",
            "properties",
            "proportion",
            "protecting",
            "protection",
            "publishing",
            "qualifying",
            "quantities",
            "reasonable",
            "reasonably",
            "recommends",
            "recovering",
            "references",
            "reflecting",
            "reflection",
            "regardless",
            "registered",
            "regulation",
            "relatively",
            "remembered",
            "repeatedly",
            "represents",
            "requesting",
            "resolution",
            "resourcing",
            "restricted",
            "ridiculous",
            "satisfying",
            "scientific",
            "separately",
            "situations",
            "specifying",
            "statements",
            "statistics",
            "structures",
            "submitting",
            "subsequent",
            "substitute",
            "successful",
            "sufficient",
            "suggesting",
            "suggestion",
            "supervisor",
            "supporting",
            "supposedly",
            "surprising",
            "suspecting",
            "suspending",
            "techniques",
            "technology",
            "television",
            "themselves",
            "thoroughly",
            "throughout",
            "translated",
            "translates",
            "ultimately",
            "underneath",
            "understand",
            "understood",
            "university",
            "unpleasant",
            "unsuitable",
            "whatsoever",
            "widespread",
            "worthwhile",
        ],
        11: [
            "accordingly",
            "advertising",
            "alternative",
            "application",
            "appreciated",
            "appreciates",
            "appropriate",
            "arrangement",
            "associating",
            "association",
            "authorities",
            "calculation",
            "circulation",
            "combination",
            "communicate",
            "competition",
            "complaining",
            "complicated",
            "complicates",
            "composition",
            "connections",
            "consequence",
            "considering",
            "consistency",
            "constraints",
            "consumption",
            "continually",
            "controlling",
            "conventions",
            "definitions",
            "demonstrate",
            "description",
            "determining",
            "development",
            "differences",
            "differently",
            "disappeared",
            "discouraged",
            "discourages",
            "discovering",
            "discussions",
            "distinction",
            "distinguish",
            "distributed",
            "distributes",
            "documenting",
            "educational",
            "effectively",
            "electronics",
            "embarrassed",
            "embarrasses",
            "encountered",
            "encouraging",
            "engineering",
            "environment",
            "essentially",
            "established",
            "establishes",
            "experienced",
            "experiences",
            "experiments",
            "explanation",
            "forthcoming",
            "fortunately",
            "fundamental",
            "imagination",
            "immediately",
            "implemented",
            "implication",
            "importantly",
            "improvement",
            "independent",
            "individuals",
            "information",
            "institution",
            "instruction",
            "intelligent",
            "interesting",
            "interpreted",
            "introducing",
            "investigate",
            "maintaining",
            "mathematics",
            "meaningless",
            "necessarily",
            "observation",
            "opportunity",
            "performance",
            "permanently",
            "possibility",
            "potentially",
            "practically",
            "preparation",
            "programmers",
            "publication",
            "punctuation",
            "recognition",
            "recommended",
            "registering",
            "regulations",
            "remembering",
            "replacement",
            "represented",
            "requirement",
            "responsible",
            "restricting",
            "significant",
            "statistical",
            "substantial",
            "suggestions",
            "temperature",
            "temporarily",
            "terminology",
            "theoretical",
            "traditional",
            "transferred",
            "translating",
            "translation",
            "understands",
            "unfortunate",
            "unnecessary",
        ],
        12: [
            "accidentally",
            "alternatives",
            "announcement",
            "applications",
            "appreciating",
            "arrangements",
            "broadcasting",
            "calculations",
            "circumstance",
            "combinations",
            "complicating",
            "consequences",
            "consequently",
            "considerable",
            "considerably",
            "continuation",
            "continuously",
            "contribution",
            "conventional",
            "conversation",
            "deliberately",
            "descriptions",
            "difficulties",
            "disadvantage",
            "disappearing",
            "discouraging",
            "distributing",
            "distribution",
            "embarrassing",
            "encountering",
            "establishing",
            "experiencing",
            "experimental",
            "guaranteeing",
            "implementing",
            "implications",
            "improvements",
            "incidentally",
            "incompatible",
            "inconsistent",
            "individually",
            "institutions",
            "instructions",
            "intelligence",
            "interpreting",
            "intervention",
            "introduction",
            "manipulation",
            "mathematical",
            "nevertheless",
            "occasionally",
            "particularly",
            "professional",
            "recommending",
            "relationship",
            "representing",
            "requirements",
            "respectively",
            "significance",
            "simultaneous",
            "sophisticate",
            "specifically",
            "successfully",
            "sufficiently",
            "transferring",
            "unacceptable",
            "universities",
            "unreasonable",
        ],
    };
});

// lib/game/nonwords.js
ig.baked = true;
ig.module("game.nonwords").defines(function () {
    NONWORDS = {
        6: [
            "snurfs",
            "blowns",
            "wofts ",
            "whols ",
            "brepth",
            "yusks ",
            "rerns ",
            "hiefed",
            "snaids",
            "slomes",
            "swerts",
            "frenes",
            "wrorms",
            "rhergs",
            "smavs ",
            "thwats",
            "prirds",
            "zaists",
            "wrasks",
            "slarts",
            "thects",
            "kefts ",
            "pretes",
            "twerts",
            "gorbs ",
            "yolved",
            "doths ",
            "dawls ",
            "staids",
            "tratts",
            "vieves",
            "scoles",
            "whoams",
            "stebbs",
            "smurfs",
            "critts",
            "droved",
            "surked",
            "chulbs",
            "pserns",
            "lerps ",
            "gwals ",
            "clulls",
            "wogged",
            "shabes",
            "chavs ",
            "flized",
            "slarfs",
            "gloals",
            "polks ",
            "plaped",
            "prilns",
            "wrols ",
            "gevved",
            "glells",
            "yarks ",
            "flonds",
            "stends",
            "hurns ",
            "cabes ",
            "nuds  ",
            "vames ",
            "thobs ",
            "snambs",
            "gnoped",
            "vaives",
            "snibs ",
            "crumed",
            "zouls ",
            "cloams",
            "gwelts",
            "yorps ",
            "droles",
            "whulfs",
            "frilks",
            "drarps",
            "foafs ",
            "phymes",
            "neets ",
            "drungs",
            "pselps",
            "nonged",
            "blorls",
            "blufts",
            "shales",
            "skowns",
            "ralmed",
            "famess ",
            "clapes",
            "ambed ",
            "dafed ",
            "julped",
            "gluids",
            "nupes ",
            "jafts ",
            "loists",
            "blalds",
            "rhyths",
            "heasts",
            "ized  ",
            "tweeps",
            "blels ",
            "frodes",
            "glunes",
            "clibs ",
            "brurbs",
            "smilds",
            "trulps",
            "plynes",
            "gweams",
            "smoops",
            "inxed ",
            "stoins",
            "yelved",
            "skaked",
            "skoons",
            "sprefs",
            "glodds",
            "knurts",
            "vilmed",
            "shrebs",
            "melped",
            "gneans",
            "grerns",
            "rilds ",
            "snigs ",
            "zepth ",
            "spaifs",
            "jorts ",
            "nusps ",
            "sives ",
            "gnibes",
            "strevs",
            "pimes ",
            "dweads",
            "abbed ",
            "flerbs",
            "yills ",
            "pelds ",
            "nimbs ",
            "glacts",
            "snolds",
            "rhesks",
            "sneems",
            "spolfs",
            "dwibes",
            "prosts",
            "ghaved",
            "oshed ",
            "slasts",
            "juths ",
            "plifts",
            "phoths",
            "droins",
            "sneds ",
            "imbs  ",
            "tarbed",
            "jelms ",
            "hynes ",
            "doods ",
            "fleuds",
            "furts ",
            "ruilds",
            "fevved",
            "gwarks",
            "gidged",
            "prorts",
            "dwasks",
            "kilmed",
            "guilts",
            "knirds",
            "vagged",
            "weafs ",
            "yeggs ",
            "frarts",
            "jaked ",
            "dreeks",
            "slifts",
            "gnards",
            "gheeps",
            "tems  ",
            "soobs ",
            "yimed ",
            "ghoffs",
            "nulls ",
            "gleers",
            "nammed",
            "saunts",
            "zonged",
            "mapsed",
            "drasts",
            "shends",
            "gwuids",
            "skoafs",
            "skupes",
            "whoths",
            "ghobes",
            "derked",
            "clarls",
        ],
    };
});

// lib/game/entities/pict.js
ig.baked = true;
ig.module("game.entities.pict")
    .requires("impact.entity")
    .defines(function () {
        EntityPic = ig.Entity.extend({
            size: { x: 4, y: 4 },
            speed: 400,
            angle: -600,
            pauseTimer: null,
            paused: false,
            answered: false,
            ques: "",
            init: function (x, y, settings) {
                this.parent(x, y, settings);
                this.vel.x = this.angle * this.speed;
                this.maxVel.x = 1200;
                this.vel.y = 0;
            },
            drawLabel: function () {
                var w = this.ques.length;
                var x = (this.pos.x - 6).limit(w + 2, ig.system.width - 1);
                var y = (this.pos.y + this.size.y - 10).limit(2, ig.system.height);
                var bx = ig.system.getDrawPos(x - w - 2);
                var by = ig.system.getDrawPos(y + 34);
                ig.system.context.font = "42px Lato";
                ig.system.context.fillStyle = "#000000";
                if (this.ques.length > 7) {
                    bx -= this.ques.length * 4;
                }
                ig.system.context.fillText(this.ques, bx, by);
            },
            update: function () {
                this.parent();
                if (this.pauseTimer) {
                    if (this.pauseTimer.delta() < 0) {
                        return;
                    } else {
                        this.vel.x = this.angle * this.speed;
                        this.pauseTimer = null;
                    }
                }
                var t = 4;
                var stop = ig.system.width / 2 - this.ques.length / 2;
                if (this.pos.x <= stop && this.paused == false && this.answered == false) {
                    this.pauseTimer = new ig.Timer(t);
                    this.paused = true;
                    this.vel.x = 0;
                }
                if (this.pos.x > ig.system.width || this.pos.x < -64) {
                    this.kill();
                }
                if (this.pos.y > ig.system.height) {
                    this.kill();
                } else if (this.pos.y < -64) {
                    this.kill();
                }
            },
            clicked: function () {
                if (this.pauseTimer) {
                    this.vel.x = this.angle * this.speed;
                    this.pauseTimer = null;
                }
                this.answered = true;
            },
        });
    });
Array.prototype.transpose = function () {
    var a = this,
        w = a.length ? a.length : 0,
        h = a[0] instanceof Array ? a[0].length : 0;
    if (h === 0 || w === 0) {
        return [];
    }
    var i,
        j,
        t = [];
    for (i = 0; i < h; i++) {
        t[i] = [];
        for (j = 0; j < w; j++) {
            t[i][j] = a[j][i];
        }
    }
    return t;
};

// lib/game/entities/shape.js
ig.baked = true;
ig.module("game.entities.shape")
    .requires("impact.entity")
    .defines(function () {
        EntityShape = ig.Entity.extend({
            size: { x: 4, y: 4 },
            speed: 40,
            angle: -600,
            pauseTimer: null,
            paused: false,
            dir: 1,
            vertical: 0,
            shape_padding: 40,
            square_padding: 2,
            v_shape: null,
            isSymmetric: false,
            init: function (x, y, settings) {
                this.parent(x, y, settings);
                this.v_shape = this.zeros([8, 4]);
                this.draw_array();
                var new_shape = this.mirror(this.v_shape);
                if (this.vertical === 1) this.v_shape = new_shape.transpose();
                else this.v_shape = new_shape;
            },
            zeros: function (dimensions) {
                var array = [];
                for (var i = 0; i < dimensions[0]; ++i) {
                    array.push(dimensions.length == 1 ? 0 : this.zeros(dimensions.slice(1)));
                }
                return array;
            },
            draw_array: function () {
                var dir = this.dir;
                var isSymmetric = this.isSymmetric;
                var v_shape = this.v_shape;
                if (Math.round(Math.random()) == 1) {
                    dir *= -1;
                }
                var sumx = 0;
                var sumy = 0;
                var size_x = 8;
                var size_y = isSymmetric ? 4 : 5;
                while (sumx < size_x && sumy < size_y) {
                    var t = Math.ceil(2 * Math.random());
                    if (dir > 0) {
                        if (sumx + t > size_x) {
                            t = size_x - sumx;
                        }
                        for (var i = 0; i < t; i++) {
                            v_shape[sumx + i][sumy] = 1;
                        }
                        sumx += t;
                    } else {
                        if (sumy + t > size_y) {
                            t = size_y - sumy;
                        }
                        for (var i = 0; i < t; i++) {
                            v_shape[sumx][sumy + i] = 1;
                        }
                        sumy += t;
                    }
                    dir *= -1;
                }
            },
            mirror: function (multiarr) {
                var ml = [];
                for (var i = 0; i < multiarr.length; i++) {
                    var a = multiarr[i];
                    var b = a.slice().reverse();
                    var c = a.concat(b);
                    ml[i] = c;
                }
                return ml;
            },
            draw_shape: function () {
                var v_shape = this.v_shape;
                var ctx = ig.system.context;
                ctx.fillStyle = "#ffffff";
                ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                var canvas_width = ctx.canvas.width;
                var canvas_height = ctx.canvas.height;
                var shape_padding = this.shape_padding;
                var square_padding = this.square_padding;
                var size = 8;
                var square_width = (canvas_width - 2 * shape_padding) / size;
                var square_height = (canvas_height - 2 * shape_padding) / size;
                ctx.fillStyle = "000000";
                ctx.fillStyle = "#DCDCDC";
                for (var i = 0; i < 8; i++) {
                    for (var j = 0; j < 8; j++) {
                        if (v_shape[i][j] == 1) {
                            ctx.fillStyle = "#D16587";
                            ctx.fillRect(shape_padding + j * square_width + square_padding, shape_padding + i * square_height + square_padding, square_width - square_padding, square_height - square_padding);
                        }
                        if (v_shape[i][j] == 0) {
                            ctx.fillStyle = "#DCDCDC";
                            ctx.fillRect(shape_padding + j * square_width + square_padding, shape_padding + i * square_height + square_padding, square_width - square_padding, square_height - square_padding);
                        }
                    }
                }
            },
            drawLabel: function () {
                this.draw_shape();
            },
            update: function () {
                this.parent();
                if (this.pauseTimer) {
                    if (this.pauseTimer.delta() < 0) {
                        return;
                    } else {
                        this.pauseTimer = null;
                    }
                }
                var t = 4;
                var stop = 120;
                if (this.pos.x <= stop && this.paused == false) {
                    this.pauseTimer = new ig.Timer(t);
                    this.paused = true;
                }
            },
            clicked: function () {
                if (this.pauseTimer) {
                    this.pauseTimer = null;
                }
                this.kill();
            },
        });
    });

// lib/game/main.js
ig.baked = true;
ig.module("game.main")
    .requires("impact.game", "impact.font", "game.words", "game.nonwords", "game.entities.pict", "game.entities.shape")
    .defines(function () {
        MyGame = ig.Game.extend({
            font: new ig.Font("media/04b03.font.png"),
            clearColor: "#FFFFFF",
            gameover: false,
            gamestarted: false,
            answered: false,
            counter: 0,
            score: 0,
            streak: 0,
            trail: 1,
            gametime: null,
            entity: null,
            strTimer: null,
            alphabetTimer: null,
            recallTimer: null,
            timeOut: false,
            next: false,
            displayAlphabet: "",
            displayposition: "",
            timeset: 60,
            consonants: ["b", "c", "d", "f", "g", "j", "k", "l", "m", "n", "p", "s", "t", "v", "x", "z"],
            shown_consonants: [],
            shown_locations: [],
            const_ans: [],
            loc_ans: [],
            stats: {},
            shapeTrails: [2, 3, 6, 7, 10, 11, 14, 15],
            isWord: false,
            correct: new ig.Sound("media/sounds/pback_corr.ogg"),
            wrong: new ig.Sound("media/sounds/pback_wrong.ogg"),
            fontTitle: new ig.Font("media/fonts/tungsten-18-orange.png"),
            model: new gamesave(),
            processing_repetitions: 0,
            repetitions_mod: 3,
            str_timer: 4,
            rectpos: {},
            locpos: {},
            gameOverTimer: null,
            isVerbal: 0,
            verbalAns: [],
            type_correct: 0,
            type_wrong: 0,
            max_alphabets_identified: 0,
            max_spatial_identified: 0,
            init: function () {
                var _self = this;
                var c = document.getElementById("canvas");
                this.can = c;
                if ("ontouchstart" in document.documentElement) {
                    c.addEventListener(
                        "touchstart",
                        function (e) {
                            return _self.onTouchStart(e);
                        },
                        false
                    );
                } else {
                    ig.input.bind(ig.KEY.LEFT_ARROW, "left");
                    ig.input.bind(ig.KEY.RIGHT_ARROW, "right");
                    ig.input.initMouse();
                    ig.input.bind(ig.KEY.MOUSE1, "lbtn");
                    ig.input.bind(ig.KEY.MOUSE2, "lbtn");
                }
                this.stats["words"] = {};
                this.stats["nonwords"] = {};
                this.stats["words"]["correct"] = 0;
                this.stats["words"]["wrong"] = 0;
                this.stats["nonwords"]["correct"] = 0;
                this.stats["nonwords"]["wrong"] = 0;
                $("#playbutton").css("visibility", "visible");
                if (window.VERBAL) {
                    this.isVerbal = 1;
                    this.reset_processing();
                } else {
                    this.isVerbal = 0;
                    this.reset_processing();
                }
                this._clr_stats();
            },
            onTouchStart: function (e) {
                if (e.targetTouches.length != 1) {
                    return false;
                }
                e.stopPropagation();
                e.preventDefault();
                var startX = e.targetTouches[0].clientX - this.can.offsetLeft;
                var startY = e.targetTouches[0].clientY - this.can.offsetTop;
                if (!this.recallTimer) {
                    return;
                }
                var coors = { x: startX, y: startY };
                this.checktouchrecall(coors);
            },
            reset: function () {
                this.shown_consonants = [];
                this.const_ans = [];
                this.shown_locations = [];
                this.loc_ans = [];
                this._clr_stats();
                this.score = 0;
                this.gameover = false;
                this.type_wrong = 0;
                this.type_correct = 0;
                this.max_alphabets_identified = 0;
                this.max_spatial_identified = 0;
                this.reset_processing();
                ig.system.startRunLoop();
            },
            _clr_stats: function () {
                this.stats["words"]["correct"] = 0;
                this.stats["words"]["wrong"] = 0;
                this.stats["nonwords"]["correct"] = 0;
                this.stats["nonwords"]["wrong"] = 0;
            },
            gamestart: function () {
                $("#inputs").css("visibility", "visible");
                this.gamestarted = true;
                this.gametime = new ig.Timer(this.timeset);
                this.strTimer = new ig.Timer(this.str_timer);
                this.reset();
            },
            addscore_oth: function (scored) {
                if (scored === true) {
                    this.correct.play();
                    this.streak++;
                    this.score += 5;
                }
                if (scored === false) {
                    this.wrong.play();
                    if (this.score - 5 > 0) {
                        this.score -= 5;
                    }
                    this.streak = 0;
                }
            },
            addscore_reg: function (scored) {
                if (scored === true) {
                    this.correct.play();
                    this.streak++;
                    this.score += 5;
                    if (this.streak > 3) {
                        this.score += 25;
                    }
                }
                if (scored === false) {
                    this.wrong.play();
                    this.streak = 0;
                }
            },
            clicked: function (sign) {
                if (this.answered == true || this.gameover == true || !this.strTimer) {
                    return false;
                }
                this.answered = true;
                this.entity.clicked();
                var scored = false;
                if (sign == ">" && this.isWord == true) {
                    scored = true;
                }
                if (sign == "<" && this.isWord == false) {
                    scored = true;
                }
                if (this.isVerbal == 1) {
                    this.addscore_oth(scored);
                } else {
                    this.addscore_reg(scored);
                }
                this.addstats(scored);
            },
            addstats: function (scored) {
                if (this.isWord == true) {
                    if (scored) {
                        this.stats["words"]["correct"]++;
                    } else {
                        this.stats["words"]["wrong"]++;
                    }
                } else {
                    if (scored) {
                        this.stats["nonwords"]["correct"]++;
                    } else {
                        this.stats["nonwords"]["wrong"]++;
                    }
                }
            },
            spawnpic: function () {
                if (this.isVerbal == 1) {
                    this.spawnverbal();
                } else {
                    this.spawnregular();
                }
            },
            spawnverbal: function () {
                var disp_str = this.getdisplay();
                var h = ig.system.height / 3;
                var picSettings = { isSymmetric: this.isWord, vel: { x: 0, y: 0 } };
                this.entity = this.spawnEntity(EntityPic, ig.system.width - 4, h, picSettings);
                this.entity.ques = disp_str;
                this.counter++;
                this.answered = false;
            },
            spawnregular: function () {
                var disp_str = this.getdisplay();
                var picSettings = { isSymmetric: this.isWord, vertical: Math.floor(Math.random() * 2), vel: { x: 0, y: 0 } };
                var h = ig.system.height / 3;
                this.counter++;
                this.answered = false;
                if ($.inArray(this.trail, this.shapeTrails) != -1) {
                    changetextshape();
                    this.entity = this.spawnEntity(EntityShape, ig.system.width - 4, h, picSettings);
                } else {
                    changetextword();
                    this.entity = this.spawnEntity(EntityPic, ig.system.width - 4, h, picSettings);
                    this.entity.ques = disp_str;
                }
            },
            update: function () {
                this.parent();
                if (this.gamestarted == false) {
                    return;
                }
                if (ig.input.pressed("left")) {
                    this.clicked("<");
                }
                if (ig.input.pressed("right")) {
                    this.clicked(">");
                }
                if (ig.input.pressed("lbtn")) {
                    this.clickedmouse();
                }
            },
            setgameover: function () {
                this.gameover = true;
                if (this.isVerbal == 1) {
                    this.model.set({ game: "chein_type" });
                    this.model.set({ cwm_type: "V" });
                    this.model.set({ type_correct: this.type_correct });
                    this.model.set({ type_wrong: this.type_wrong });
                    this.model.set({ max_alphabet_ident: this.max_alphabets_identified });
                    this.model.set({ max_spatial_ident: this.max_spatial_identified });
                } else {
                    this.model.set({ game: "chein" });
                }
                this.model.set({ score: this.score });
                this.model.save();
                this.gameOverTimer = new ig.Timer(3);
            },
            clickedmouse: function (coors) {
                if (!this.recallTimer) {
                    return;
                }
                if (this.iseventrail()) {
                    this.checklocrecall(coors);
                } else {
                    this.checkconsrecall(coors);
                }
            },
            checktouchrecall: function (coors) {
                this.clickedmouse(coors);
            },
            checklocrecall: function (coors) {
                var ans = this.getclickedconsonant(coors);
                var ans_idx = this.loc_ans.length;
                if (this.shown_locations[ans_idx] == ans) {
                    this.score += 10;
                    this.correct.play();
                    this.loc_ans.push(ans);
                    if (this.loc_ans.length == this.shown_locations.length) {
                        this.recallTimer.set(-12);
                    }
                } else {
                    this.wrong.play();
                    this.recallTimer.set(-12);
                }
            },
            checkconsrecall: function (coors) {
                var ans = this.getclickedconsonant(coors);
                var ans_idx = this.const_ans.length;
                if (this.shown_consonants[ans_idx] == ans) {
                    this.score += 10;
                    this.correct.play();
                    this.const_ans.push(ans);
                    if (this.const_ans.length == this.shown_consonants.length) {
                        this.recallTimer.set(-12);
                    }
                } else {
                    this.wrong.play();
                    this.recallTimer.set(-12);
                }
            },
            getclickedconsonant: function (coors) {
                var x, y;
                if (coors) {
                    x = coors.x;
                    y = coors.y;
                } else {
                    x = ig.system.getDrawPos(ig.input.mouse.x);
                    y = ig.system.getDrawPos(ig.input.mouse.y);
                }
                var list_obj = this.iseventrail() ? this.locpos : this.rectpos;
                for (var cons in list_obj) {
                    var obj = list_obj[cons];
                    if (x >= obj.x_st && x <= obj.x_end && y >= obj.y_st && y <= obj.y_end) {
                        return cons;
                    }
                }
                return false;
            },
            draw: function () {
                this.parent();
                if (this.gamestarted == false) {
                    return;
                }
                if (this.gameover == true) {
                    if (this.gameOverTimer.delta() > 0) {
                        ig.system.stopRunLoop();
                        if (this.isVerbal == 1) {
                            window.location.href = "/today?type=verbal";
                        } else {
                            window.location.href = "/gameover?game=chein";
                        }
                    }
                    return;
                }
                for (var i = 0; i < this.entities.length; i++) {
                    this.entities[i].draw();
                    this.entities[i].drawLabel();
                }
                if (!this.entities.length && this.gameover == false) {
                    if (this.strTimer) {
                        if (this.strTimer.delta() < 0) {
                            this.spawnpic();
                        } else {
                            this.strTimer = null;
                            this.entity && this.entity.kill();
                            this.handleregular();
                        }
                    }
                    if (this.alphabetTimer) {
                        if (this.alphabetTimer.delta() < 0) {
                            if (this.iseventrail()) {
                                this.showlocrecall();
                                this.higliteloc(this.displayposition);
                            } else {
                                this.showalphabetonscreen();
                            }
                        } else {
                            this.alphabetTimer = null;
                            this.processing_repetitions++;
                            this.strTimer = new ig.Timer(this.str_timer);
                            if (this.processing_repetitions % this.repetitions_mod == 0) {
                                this.recallTimer = new ig.Timer(15);
                                this.strTimer = null;
                            }
                        }
                    }
                    if (this.recallTimer) {
                        if (this.recallTimer.delta() > 0) {
                            this.recallTimer = null;
                            this.timeOut = true;
                        } else {
                            if (this.iseventrail()) {
                                this.showlocrecall();
                            } else {
                                this.showalprecall();
                            }
                            this.showcorrectlocans();
                        }
                    }
                    if (this.timeOut) {
                        if (this.next) {
                            this.timeOut = false;
                            this.next = false;
                            if (this.isVerbal == 1) {
                                this.type_correct += this.stats["words"]["correct"];
                                this.type_wrong += this.stats["words"]["wrong"];
                                this.store_verb_ans();
                                this.reset_processing();
                            } else {
                                this.store_verb_ans();
                                this.reset_processing();
                            }
                            this.trail++;
                            this.shown_consonants = [];
                            this.const_ans = [];
                            this.shown_locations = [];
                            this.loc_ans = [];
                            if (this.trail == 16) {
                                this.setgameover();
                                return;
                            }
                            this.strTimer = new ig.Timer(this.str_timer);
                            this._clr_stats();
                            $("#continue").css("visibility", "hidden");
                            $("#exit").css("visibility", "hidden");
                        } else {
                            this.showfeedback();
                        }
                    }
                }
            },
            roundUp: function () {
                this.next = true;
            },
            gameUp: function () {
                $("#continue").css("visibility", "hidden");
                $("#exit").css("visibility", "hidden");
                this.setgameover();
            },
            reset_processing: function () {
                if (this.isVerbal == 1 && this.verbalAns.length < 2 && window.LASTMAX) {
                    var max = window.LASTMAX.split(",");
                    var tmp = this.verbalAns.length == 0 ? max[0] : max[1];
                    this.repetitions_mod = parseInt(tmp, 10);
                    this.processing_repetitions = 0;
                    return;
                }
                if (this.verbalAns.length >= 2) {
                    var curr_offset_in_arr = this.verbalAns.length - 1;
                    var prev = curr_offset_in_arr - 1;
                    var det = this.verbalAns[prev];
                    if (det && det["won"] === true) {
                        this.repetitions_mod = det["repetitions"] < 15 ? det["repetitions"] + 1 : det["repetitions"];
                        this.processing_repetitions = 0;
                    }
                    if (det && det["won"] === false) {
                        this.repetitions_mod = det["repetitions"];
                        this.processing_repetitions = 0;
                    }
                }
            },
            store_verb_ans: function () {
                var str, str2, even;
                var sc = 0;
                if (this.iseventrail()) {
                    str = this.shown_locations.join(",");
                    str2 = this.loc_ans.join(",");
                    sc = this.loc_ans.length * 10;
                    if (this.loc_ans.length > this.max_spatial_identified) {
                        this.max_spatial_identified = this.loc_ans.length;
                    }
                    even = 1;
                } else {
                    str = this.shown_consonants.join(",");
                    str2 = this.const_ans.join(",");
                    sc = this.const_ans.length * 10;
                    if (this.const_ans.length > this.max_alphabets_identified) {
                        this.max_alphabets_identified = this.const_ans.length;
                    }
                    even = 0;
                }
                var det = {};
                var scored = str == str2;
                this.score += sc;
                det["won"] = scored;
                det["eventrail"] = even;
                det["repetitions"] = this.repetitions_mod;
                this.verbalAns.push(det);
            },
            handleregular: function () {
                if (this.iseventrail()) {
                    this.displayposition = this.getrandlocss();
                    this.shown_locations.push(this.displayposition);
                } else {
                    this.displayAlphabet = this.getrandcons();
                    this.shown_consonants.push(this.displayAlphabet);
                }
                var t = this.isVerbal == 1 ? 0.75 : 1;
                this.alphabetTimer = new ig.Timer(t);
            },
            iseventrail: function () {
                return this.trail % 2 == 0;
            },
            showalphabetonscreen: function () {
                var xs = ig.system.getDrawPos(ig.system.width / 2);
                var ys = ig.system.getDrawPos(ig.system.height / 2);
                ig.system.context.font = "44px Lato";
                ig.system.context.fillStyle = "#ff3b41";
                ig.system.context.fillText(this.displayAlphabet, xs, ys);
            },
            showfeedback: function () {
                $("#scr").css("visibility", "visible");
                $("#inputs").css("visibility", "hidden");
                var disp = ig.system.context;
                var bx = ig.system.getDrawPos(ig.system.width);
                var by = ig.system.getDrawPos(ig.system.height);
                var trl = -1;
                disp.clearRect(0, 0, bx, by);
                var c = document.getElementById("canvas");
                var ctx = c.getContext("2d");
                ctx.drawImage(canImg, 0, 0, 500, 400);
                disp.fillStyle = "#3F51B5";
                disp.font = window.navigator.userAgent.search("firefox") >= 0 ? "16px Lato" : "21px Lato";
                y = 75;
                var type = " Words ";
                if (!this.isVerbal && !this.entity.ques) {
                    type = " Symmetric shapes ";
                }
                var str = type + ": " + "Correct = " + this.stats["words"]["correct"] + " Wrong = " + this.stats["words"]["wrong"];
                y += 40;
                disp.fillText(str, 35, y);
                str = " Non " + type + " : " + "Correct = " + this.stats["nonwords"]["correct"] + " Wrong = " + this.stats["nonwords"]["wrong"];
                y += 20;
                disp.fillText(str, 35, y);
                var str2;
                var temp;
                if (this.iseventrail()) {
                    str = " Shown locations : " + this.shown_locations.join(", ");
                    if (this.loc_ans == "") {
                        temp = "None";
                    } else {
                        temp = this.loc_ans.join(", ");
                    }
                    str2 = " Correct Locations identified : " + temp;
                } else {
                    str = " Shown consonants : " + this.shown_consonants.join(", ");
                    if (this.const_ans == "") {
                        temp = "None";
                    } else {
                        temp = this.const_ans.join(", ");
                    }
                    str2 = " Correct consonants identified : " + temp;
                }
                y += 50;
                disp.fillText(str, 35, y);
                y += 25;
                disp.fillText(str2, 35, y);
                str = " Score: " + this.score;
                y += 45;
                disp.fillText(str, 35, y);
                $("#continue").css("visibility", "visible");
                $("#exit").css("visibility", "visible");
            },
            higliteloc: function (loc) {
                var display = ig.system.context;
                display.fillStyle = "#009688";
                display.strokeStyle = "#FFF";
                var bx = ig.system.getDrawPos(ig.system.width);
                var by = ig.system.getDrawPos(ig.system.height);
                var pos_obj = this.iseventrail() ? this.locpos : this.rectpos;
                var pos = pos_obj[loc];
                var height = by / 4;
                var width = bx / 4;
                pos_obj[loc].hlt = 1;
                var n = 4;
                display.fillRect(pos.x_st + n, pos.y_st + n, width - n * 2, height - n * 2);
            },
            showcorrectlocans: function () {
                var arr = this.iseventrail() ? this.loc_ans : this.const_ans;
                for (var i = 0; i < arr.length; i++) {
                    this.higliteloc(arr[i]);
                }
            },
            showlocrecall: function () {
                var display = ig.system.context;
                display.fillStyle = "#b0bec5";
                var bx = ig.system.getDrawPos(ig.system.width);
                var by = ig.system.getDrawPos(ig.system.height);
                display.fillRect(0, 0, bx, by);
                var height = by / 4;
                var width = bx / 4;
                display.strokeStyle = "#FFF";
                display.lineWidth = 2;
                var x = 0;
                var y = 0;
                for (i = 0; i < 16; i++) {
                    if (i > 0 && i % 4 == 0) {
                        y += height;
                        x = 0;
                    }
                    if (!this.locpos[i]) {
                        this.locpos[i] = {};
                        this.locpos[i].x_st = x;
                        this.locpos[i].x_end = x + width;
                        this.locpos[i].y_st = y;
                        this.locpos[i].y_end = y + height;
                    }
                    display.strokeRect(x, y, width, height);
                    var fx = x + width / 2;
                    var fy = y + height / 2;
                    x += width;
                }
            },
            showalprecall: function () {
                var display = ig.system.context;
                display.fillStyle = "#b0bec5";
                var bx = ig.system.getDrawPos(ig.system.width);
                var by = ig.system.getDrawPos(ig.system.height);
                display.fillRect(0, 0, bx, by);
                var height = by / 4;
                var width = bx / 4;
                display.strokeStyle = "#FFF";
                var x = 0;
                var y = 0;
                for (i = 0; i < 16; i++) {
                    if (i > 0 && i % 4 == 0) {
                        y += height;
                        x = 0;
                    }
                    display.strokeRect(x, y, width, height);
                    var cons = this.consonants[i];
                    if (!this.rectpos[cons]) {
                        this.rectpos[cons] = {};
                        this.rectpos[cons].x_st = x;
                        this.rectpos[cons].x_end = x + width;
                        this.rectpos[cons].y_st = y;
                        this.rectpos[cons].y_end = y + height;
                    }
                    var fx = x + width / 2;
                    var fy = y + height / 2;
                    this.addfont(this.consonants[i], fx, fy);
                    x += width;
                }
            },
            addfont: function (str, bx, by) {
                ig.system.context.font = "32px Lato";
                ig.system.context.fillStyle = "#000000";
                ig.system.context.fillText(str, bx, by);
            },
            getrandlocss: function () {
                var loc;
                while (!loc) {
                    var a = Math.floor(Math.random() * this.consonants.length);
                    if (this.in_array(this.shown_locations, a)) {
                        continue;
                    } else {
                        loc = a;
                    }
                }
                return loc;
            },
            getrandcons: function () {
                var alpbt;
                while (!alpbt) {
                    var a = this.consonants[Math.floor(Math.random() * this.consonants.length)];
                    if (this.in_array(this.shown_consonants, a)) {
                        continue;
                    } else {
                        alpbt = a;
                    }
                }
                return alpbt;
            },
            in_array: function (array, el) {
                for (var i = 0, j = array.length; i < j; i++) if (array[i] == el) return true;
                return false;
            },
            getdisplay: function () {
                var str;
                var rand = Math.floor(Math.random() * 2) + 1;
                if (rand < 2) {
                    var len = Math.floor(Math.random() * (12 - 3) + 3);
                    str = WORDS[len].random();
                    this.isWord = true;
                } else {
                    str = NONWORDS[6].random();
                    this.isWord = false;
                }
                return str;
            },
        });
        if (ig.ua.mobile) {
            ig.Sound.enabled = false;
        }
        var canvas = document.getElementById("canvas");
        var can_height = canvas.height / 2;
        var can_width = canvas.width / 2;
        ig.main("#canvas", MyGame, 60, can_width, can_height, 2);
    });
